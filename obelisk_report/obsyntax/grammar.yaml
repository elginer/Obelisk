# Copyright John Morrice 2010
# This document is part of The Obelisk Programming Language documentation.
# This document is released under the terms of the GNU Free Documentation Licence.
# See the file DOC-COPYING for copying conditions.

title: Grammar
number: 2
unique: grammar
text:
   - class: stage
     text: "A parser for Obelisk's grammar is generated from {external this happy file. happy/obelisk.y}"
   - "Following is the syntax of Obelisk described in {external EBNF http://www.iso.org/iso/catalogue_detail.htm?csnumber=26153}.  {class Obelisk example} is the start symbol."
   - class: example
     wrap: False
     text:
        "(* Obelisk source is a sequence of function definitions. *)
       \nObelisk: FunctionDefinition*
       \n
       \n(* Definitions *)
       \n
       \n(* A function definition *)
       \nFunction := FunctionType 'def' FunctionName FormalArguments Block WhereClause
       \n
       \n(* Where Clause *)
       \nWhereClause := 'where' '\{' Definition* '}' | @
       \n
       \n(* Where clause definition *)
       \nDefinition := Constant | Function
       \n
       \n(* Define a constant *)
       \nConstant := Type 'let' Identifier Expression
       \n
       \n(* A function's name *)
       \nFunctionName := Identifier
       \n
       \n(* A function's formal arguments *)
       \nFormalArguments := Identifier*
       \n
       \n(* Expressions *)
       \n
       \n(* A block of code *)
       \nBlock := '\{' Expression* WhereClause '}'
       \n
       \n(* An expression *)
       \nExpression := If | Application | Identifier | Character | Integer
       \n
       \n(* If statement *)
       \nIf := 'if' Expression Block Block
       \n
       \n(* Function application *)
       \nApplication := '(' Expression+ ')'
       \n
       \n(* Values *)
       \n
       \n(* Character *)
       \nCharacter := ''' (* Any character *) '''
       \n
       \n(* A value's identifier *)
       \nIdentifier := Lowercase IdentChar*
       \n
       \n(* Characters permitted in an identifier *)
       \nIdentChar := (* An alpha numeric character *) | '_' | '?' | '!'
       \n
       \n(* Types *)
       \n
       \n(* A type *)
       \nType := ClassName | FunctionType
       \n
       \n(* A function's type *)
       \nFunctionType := '(' ClassName ('->' ClassName)* ')'
       \n
       \n(* A name of a data type *)
       \nClassName := Uppercase IdentChar*"
