# Copyright John Morrice 2010
# This document is part of The Obelisk Programming Language documentation.
# This document is released under the terms of the GNU Free Documentation Licence.
# See the file DOC-COPYING for copying conditions.

title: Scope
number: 1
unique: scope
text:
   - class: stage
     text: "The {external scoper Language/Obelisk/Scoper.hs} ensures scoping rules are obeyed."
   - "The process of determining if an Obelisk program has correct scoping is described here."
   - "An Obelisk program with correct scoping has the following properties when  {section evaluated eval}:"
   - "* The program can never crash due to encountering an identifier it does not associate with data or a function."
   - "{class next_scope example} is a relationship between and sets of variables in scope and sets with new members.  
      It is defined for each grammar element which contains other elements (is a set)."
   - class: example
     language: math
     text: "forall A. A is SET. forsome S. forsome Q. A member O. A derives next_scope(A, S, Q) implies S subset Q."

   - "Definitions for {class new_scope example} are given below."

   - "{class scope example} is a function from a grammar element and a set of variables in scope to true or false.
      It is defined for each grammar element in O."
   - class: example
     language: math
     text: "forall A. forsome S. A member O. A derives scope(A, S)"

   - "Definitions for {class scope example} are given below."

   - "Definitions follow:"
   - "If all the members of set are syntactic elements,
      with a {class next_scope example} rule
      then the set has correct scoping when all of its members have correct scoping in the context of some scoping set."
   - language: math
     class: example
     text: "forsome D. D member O.  D is SET.
          \nforall A. A member D.
          \nforsome S.
          \nforsome Q. 
          \nnext_scope(A, S, Q). 
          \nscope(D, S) iff scope(A, Q)"

   - "Hence a program P only has correct scoping when its elements have correct scoping:"
   - language: math
     class: example
     text: "forall A. A member P. next_scope(P, S, Q). scope(A, Q) iff scope(P, S)"

   - "A function definition {class F example} only has correct scoping when
     the set of its where clause constants {class Wc example} have correct scoping and
     the set of its where clause function definitions {class Wf example} have correct scopping and
     its block {class Fb example} has correct scoping."
   - language: math
     class: example
     wrap: False
     text: "forall F. F is FUNCTIONDEFINITION.
          \nforsome FB. Fb member F. Fb is BLOCK.
          \nforsome Wh. Wh member F. Wh is SET. forall G. G member Wh. G is DEFINITION. 
          \nforsome A. A is FORMALARGUMENTS. Sa := A union S.
          \nforsome Bq. new_scope(Fb, Sa, Bq). 
          \nforsome Whq. new_scope(Wh, Sa, Whq).
          \nscope(F, S) iff scope(Fb, Bq) and scope(Wh, Whq)"

   - "{class next_scope example} for the function's block {class Fb example} is the union of the function's own scope, 
      the function's formal arguments,
      and all definitions in the where clause.  Using the quantified variables above:" 
   - language: math
     class: example
     wrap: False
     text: "new_scope(Fb, S, Bq) iff Bq = Wh union S"

   - "{class next_scope example} for a where clause definition is the union of the old scope
      with the names of the where clause's function definitions."
   - langugage: math
     class: example
     wrap: False
     text: "forall Wf.  Wf subset Wh.  forall F. F member Wf. F is FUNCTIONDEFINITION.
          \nnew_scope(Wh, S, Whq) iff Whq = Wf union S."

   - "A block associates a set of expressions with a where clause."
   - language: math
     class: example
     wrap: False
     text: "forall B. B is BLOCK. 
          \nforsome Be. Be member B. Fe is SET. forall E. E member Fe. E is EXPRESSION.
          \nforsome Wh. Wh member B. Wh is SET. forall G. G member Wh. G is DEFINITION. 
          \nforsome S. forsome Whq. new_scope(Wh, S, Whq).
          \nscope(B, S) iff scope(Be, Wh union S) and scope(Wh, Whq)"

   - "Following are the rules for the different kinds of expression:"

   - "For an identifier I to be in scope, the string making up that identifier must be a member of the scoping set S."
   - class: example
     wrap: False
     language: math
     text: "forall I. I is IDENTIFIER. 
          \nforsome S.
          \nI member S iff scope(I, S)"

   - "Literal values (numbers, characters etc) are always in scope."
   - class: example
     language: math
     text: "forall N. N is LITERAL. forall S. scope(I,S)"

   - "If statements can be considered sets, as they are non-terminal and introduce no new identifiers into the scope.
      Hence they can be handled as per sets above."

   - "Applications, both infix and prefix can be considered sets of expressions, for the same reasons, hence are handled as for sets above"
     
