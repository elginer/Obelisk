-----------------------------------------------------------------------------
Info file generated by Happy Version 1.18.4 from obelisk.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> Obelisk                            (0)
	Pos ->                                             (1)
	Obelisk -> FDefs                                   (2)
	FDefs -> FDefs '(' FDef ')'                        (3)
	FDefs ->                                           (4)
	Defs -> Defs '(' Def ')'                           (5)
	Defs ->                                            (6)
	FDef -> Pos def var Vars Block WhereClause         (7)
	Def -> FDef                                        (8)
	Def -> Pos ':' var Exp                             (9)
	WhereClause -> where '(' Defs ')'                  (10)
	WhereClause ->                                     (11)
	Vars ->                                            (12)
	Vars -> Vars var                                   (13)
	If -> Pos if Exp Block Block                       (14)
	TExp -> Var                                        (15)
	TExp -> Int                                        (16)
	TExp -> Bool                                       (17)
	Exp -> TExp                                        (18)
	Exp -> '(' PExp ')'                                (19)
	PExp -> Apply                                      (20)
	PExp -> Infix                                      (21)
	PExp -> If                                         (22)
	Apply -> Pos Exp Exps                              (23)
	Exps ->                                            (24)
	Exps -> Exps Exp                                   (25)
	Infix -> Pos Exp op Exp                            (26)
	Var -> Pos var                                     (27)
	Int -> Pos int                                     (28)
	Bool -> Pos true                                   (29)
	Bool -> Pos false                                  (30)
	Block -> Pos '(' Exps ')'                          (31)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	def            { TDef }
	if             { TIf }
	int            { TInt $$ }
	var            { TVar $$ }
	op             { TOp $$ }
	true           { TTrue }
	false          { TFalse }
	where          { TWhere }
	':'            { TConstant }
	'('            { TParOpen }
	')'            { TParClose }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	Pos             rule  1
	Obelisk         rule  2
	FDefs           rules 3, 4
	Defs            rules 5, 6
	FDef            rule  7
	Def             rules 8, 9
	WhereClause     rules 10, 11
	Vars            rules 12, 13
	If              rule  14
	TExp            rules 15, 16, 17
	Exp             rules 18, 19
	PExp            rules 20, 21, 22
	Apply           rule  23
	Exps            rules 24, 25
	Infix           rule  26
	Var             rule  27
	Int             rule  28
	Bool            rules 29, 30
	Block           rule  31

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'('            reduce using rule 4
	%eof           reduce using rule 4

	Obelisk        goto state 2
	FDefs          goto state 3

State 1




State 2

	%start_parse -> Obelisk .                           (rule 0)

	%eof           accept


State 3

	Obelisk -> FDefs .                                  (rule 2)
	FDefs -> FDefs . '(' FDef ')'                       (rule 3)

	'('            shift, and enter state 4
	%eof           reduce using rule 2


State 4

	FDefs -> FDefs '(' . FDef ')'                       (rule 3)

	def            reduce using rule 1

	Pos            goto state 5
	FDef           goto state 6

State 5

	FDef -> Pos . def var Vars Block WhereClause        (rule 7)

	def            shift, and enter state 8


State 6

	FDefs -> FDefs '(' FDef . ')'                       (rule 3)

	')'            shift, and enter state 7


State 7

	FDefs -> FDefs '(' FDef ')' .                       (rule 3)

	'('            reduce using rule 3
	%eof           reduce using rule 3


State 8

	FDef -> Pos def . var Vars Block WhereClause        (rule 7)

	var            shift, and enter state 9


State 9

	FDef -> Pos def var . Vars Block WhereClause        (rule 7)

	var            reduce using rule 12
	'('            reduce using rule 12

	Vars           goto state 10

State 10

	FDef -> Pos def var Vars . Block WhereClause        (rule 7)
	Vars -> Vars . var                                  (rule 13)

	var            shift, and enter state 13
	'('            reduce using rule 1

	Pos            goto state 11
	Block          goto state 12

State 11

	Block -> Pos . '(' Exps ')'                         (rule 31)

	'('            shift, and enter state 16


State 12

	FDef -> Pos def var Vars Block . WhereClause        (rule 7)

	where          shift, and enter state 15
	')'            reduce using rule 11

	WhereClause    goto state 14

State 13

	Vars -> Vars var .                                  (rule 13)

	var            reduce using rule 13
	'('            reduce using rule 13


State 14

	FDef -> Pos def var Vars Block WhereClause .        (rule 7)

	')'            reduce using rule 7


State 15

	WhereClause -> where . '(' Defs ')'                 (rule 10)

	'('            shift, and enter state 18


State 16

	Block -> Pos '(' . Exps ')'                         (rule 31)

	int            reduce using rule 24
	var            reduce using rule 24
	true           reduce using rule 24
	false          reduce using rule 24
	'('            reduce using rule 24
	')'            reduce using rule 24

	Exps           goto state 17

State 17

	Exps -> Exps . Exp                                  (rule 25)
	Block -> Pos '(' Exps . ')'                         (rule 31)

	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            shift, and enter state 26
	')'            shift, and enter state 27

	Pos            goto state 20
	TExp           goto state 21
	Exp            goto state 22
	Var            goto state 23
	Int            goto state 24
	Bool           goto state 25

State 18

	WhereClause -> where '(' . Defs ')'                 (rule 10)

	'('            reduce using rule 6
	')'            reduce using rule 6

	Defs           goto state 19

State 19

	Defs -> Defs . '(' Def ')'                          (rule 5)
	WhereClause -> where '(' Defs . ')'                 (rule 10)

	'('            shift, and enter state 37
	')'            shift, and enter state 38


State 20

	Var -> Pos . var                                    (rule 27)
	Int -> Pos . int                                    (rule 28)
	Bool -> Pos . true                                  (rule 29)
	Bool -> Pos . false                                 (rule 30)

	int            shift, and enter state 33
	var            shift, and enter state 34
	true           shift, and enter state 35
	false          shift, and enter state 36


State 21

	Exp -> TExp .                                       (rule 18)

	int            reduce using rule 18
	var            reduce using rule 18
	op             reduce using rule 18
	true           reduce using rule 18
	false          reduce using rule 18
	'('            reduce using rule 18
	')'            reduce using rule 18


State 22

	Exps -> Exps Exp .                                  (rule 25)

	int            reduce using rule 25
	var            reduce using rule 25
	true           reduce using rule 25
	false          reduce using rule 25
	'('            reduce using rule 25
	')'            reduce using rule 25


State 23

	TExp -> Var .                                       (rule 15)

	int            reduce using rule 15
	var            reduce using rule 15
	op             reduce using rule 15
	true           reduce using rule 15
	false          reduce using rule 15
	'('            reduce using rule 15
	')'            reduce using rule 15


State 24

	TExp -> Int .                                       (rule 16)

	int            reduce using rule 16
	var            reduce using rule 16
	op             reduce using rule 16
	true           reduce using rule 16
	false          reduce using rule 16
	'('            reduce using rule 16
	')'            reduce using rule 16


State 25

	TExp -> Bool .                                      (rule 17)

	int            reduce using rule 17
	var            reduce using rule 17
	op             reduce using rule 17
	true           reduce using rule 17
	false          reduce using rule 17
	'('            reduce using rule 17
	')'            reduce using rule 17


State 26

	Exp -> '(' . PExp ')'                               (rule 19)

	if             reduce using rule 1
	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            reduce using rule 1

	Pos            goto state 28
	If             goto state 29
	PExp           goto state 30
	Apply          goto state 31
	Infix          goto state 32

State 27

	Block -> Pos '(' Exps ')' .                         (rule 31)

	where          reduce using rule 31
	'('            reduce using rule 31
	')'            reduce using rule 31


State 28

	If -> Pos . if Exp Block Block                      (rule 14)
	Apply -> Pos . Exp Exps                             (rule 23)
	Infix -> Pos . Exp op Exp                           (rule 26)

	if             shift, and enter state 44
	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            shift, and enter state 26

	Pos            goto state 20
	TExp           goto state 21
	Exp            goto state 43
	Var            goto state 23
	Int            goto state 24
	Bool           goto state 25

State 29

	PExp -> If .                                        (rule 22)

	')'            reduce using rule 22


State 30

	Exp -> '(' PExp . ')'                               (rule 19)

	')'            shift, and enter state 42


State 31

	PExp -> Apply .                                     (rule 20)

	')'            reduce using rule 20


State 32

	PExp -> Infix .                                     (rule 21)

	')'            reduce using rule 21


State 33

	Int -> Pos int .                                    (rule 28)

	int            reduce using rule 28
	var            reduce using rule 28
	op             reduce using rule 28
	true           reduce using rule 28
	false          reduce using rule 28
	'('            reduce using rule 28
	')'            reduce using rule 28


State 34

	Var -> Pos var .                                    (rule 27)

	int            reduce using rule 27
	var            reduce using rule 27
	op             reduce using rule 27
	true           reduce using rule 27
	false          reduce using rule 27
	'('            reduce using rule 27
	')'            reduce using rule 27


State 35

	Bool -> Pos true .                                  (rule 29)

	int            reduce using rule 29
	var            reduce using rule 29
	op             reduce using rule 29
	true           reduce using rule 29
	false          reduce using rule 29
	'('            reduce using rule 29
	')'            reduce using rule 29


State 36

	Bool -> Pos false .                                 (rule 30)

	int            reduce using rule 30
	var            reduce using rule 30
	op             reduce using rule 30
	true           reduce using rule 30
	false          reduce using rule 30
	'('            reduce using rule 30
	')'            reduce using rule 30


State 37

	Defs -> Defs '(' . Def ')'                          (rule 5)

	def            reduce using rule 1
	':'            reduce using rule 1

	Pos            goto state 39
	FDef           goto state 40
	Def            goto state 41

State 38

	WhereClause -> where '(' Defs ')' .                 (rule 10)

	')'            reduce using rule 10


State 39

	FDef -> Pos . def var Vars Block WhereClause        (rule 7)
	Def -> Pos . ':' var Exp                            (rule 9)

	def            shift, and enter state 8
	':'            shift, and enter state 49


State 40

	Def -> FDef .                                       (rule 8)

	')'            reduce using rule 8


State 41

	Defs -> Defs '(' Def . ')'                          (rule 5)

	')'            shift, and enter state 48


State 42

	Exp -> '(' PExp ')' .                               (rule 19)

	int            reduce using rule 19
	var            reduce using rule 19
	op             reduce using rule 19
	true           reduce using rule 19
	false          reduce using rule 19
	'('            reduce using rule 19
	')'            reduce using rule 19


State 43

	Apply -> Pos Exp . Exps                             (rule 23)
	Infix -> Pos Exp . op Exp                           (rule 26)

	int            reduce using rule 24
	var            reduce using rule 24
	op             shift, and enter state 47
	true           reduce using rule 24
	false          reduce using rule 24
	'('            reduce using rule 24
	')'            reduce using rule 24

	Exps           goto state 46

State 44

	If -> Pos if . Exp Block Block                      (rule 14)

	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            shift, and enter state 26

	Pos            goto state 20
	TExp           goto state 21
	Exp            goto state 45
	Var            goto state 23
	Int            goto state 24
	Bool           goto state 25

State 45

	If -> Pos if Exp . Block Block                      (rule 14)

	'('            reduce using rule 1

	Pos            goto state 11
	Block          goto state 52

State 46

	Apply -> Pos Exp Exps .                             (rule 23)
	Exps -> Exps . Exp                                  (rule 25)

	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            shift, and enter state 26
	')'            reduce using rule 23

	Pos            goto state 20
	TExp           goto state 21
	Exp            goto state 22
	Var            goto state 23
	Int            goto state 24
	Bool           goto state 25

State 47

	Infix -> Pos Exp op . Exp                           (rule 26)

	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            shift, and enter state 26

	Pos            goto state 20
	TExp           goto state 21
	Exp            goto state 51
	Var            goto state 23
	Int            goto state 24
	Bool           goto state 25

State 48

	Defs -> Defs '(' Def ')' .                          (rule 5)

	'('            reduce using rule 5
	')'            reduce using rule 5


State 49

	Def -> Pos ':' . var Exp                            (rule 9)

	var            shift, and enter state 50


State 50

	Def -> Pos ':' var . Exp                            (rule 9)

	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            shift, and enter state 26

	Pos            goto state 20
	TExp           goto state 21
	Exp            goto state 54
	Var            goto state 23
	Int            goto state 24
	Bool           goto state 25

State 51

	Infix -> Pos Exp op Exp .                           (rule 26)

	')'            reduce using rule 26


State 52

	If -> Pos if Exp Block . Block                      (rule 14)

	'('            reduce using rule 1

	Pos            goto state 11
	Block          goto state 53

State 53

	If -> Pos if Exp Block Block .                      (rule 14)

	')'            reduce using rule 14


State 54

	Def -> Pos ':' var Exp .                            (rule 9)

	')'            reduce using rule 9


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 32
Number of terminals: 11
Number of non-terminals: 20
Number of states: 55
