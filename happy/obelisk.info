-----------------------------------------------------------------------------
Info file generated by Happy Version 1.18.4 from obelisk.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> Obelisk                            (0)
	Pos ->                                             (1)
	Obelisk -> Stmts                                   (2)
	Stmts ->                                           (3)
	Stmts -> Stmts Stmt                                (4)
	Stmt -> Stmtexp                                    (5)
	Stmt -> '(' PStmt ')'                              (6)
	PStmt -> Def                                       (7)
	PStmt -> If                                        (8)
	PStmt -> LocalSet                                  (9)
	PStmt -> PStmtexp                                  (10)
	Def -> Pos def var Vars Returner                   (11)
	Vars ->                                            (12)
	Vars -> Vars var                                   (13)
	If -> Pos if Exp Returner Returner                 (14)
	LocalSet -> Pos set var Exp                        (15)
	PStmtexp -> Pos PExp                               (16)
	Stmtexp -> Pos TExp                                (17)
	TExp -> Var                                        (18)
	TExp -> Int                                        (19)
	TExp -> Bool                                       (20)
	Exp -> TExp                                        (21)
	Exp -> '(' PExp ')'                                (22)
	PExp -> Apply                                      (23)
	PExp -> Infix                                      (24)
	Apply -> Pos Exp Exps                              (25)
	Exps ->                                            (26)
	Exps -> Exps Exp                                   (27)
	Infix -> Pos Exp op Exp                            (28)
	Var -> Pos var                                     (29)
	Int -> Pos int                                     (30)
	Bool -> Pos true                                   (31)
	Bool -> Pos false                                  (32)
	Returner -> Pos '(' Stmts ')'                      (33)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	def            { TDef }
	if             { TIf }
	int            { TInt $$ }
	var            { TVar $$ }
	op             { TOp $$ }
	true           { TTrue }
	false          { TFalse }
	set            { LocalSetter }
	'('            { TParOpen }
	')'            { TParClose }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	Pos             rule  1
	Obelisk         rule  2
	Stmts           rules 3, 4
	Stmt            rules 5, 6
	PStmt           rules 7, 8, 9, 10
	Def             rule  11
	Vars            rules 12, 13
	If              rule  14
	LocalSet        rule  15
	PStmtexp        rule  16
	Stmtexp         rule  17
	TExp            rules 18, 19, 20
	Exp             rules 21, 22
	PExp            rules 23, 24
	Apply           rule  25
	Exps            rules 26, 27
	Infix           rule  28
	Var             rule  29
	Int             rule  30
	Bool            rules 31, 32
	Returner        rule  33

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	int            reduce using rule 3
	var            reduce using rule 3
	true           reduce using rule 3
	false          reduce using rule 3
	'('            reduce using rule 3
	%eof           reduce using rule 3

	Obelisk        goto state 2
	Stmts          goto state 3

State 1




State 2

	%start_parse -> Obelisk .                           (rule 0)

	%eof           accept


State 3

	Obelisk -> Stmts .                                  (rule 2)
	Stmts -> Stmts . Stmt                               (rule 4)

	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            shift, and enter state 7
	%eof           reduce using rule 2

	Pos            goto state 4
	Stmt           goto state 5
	Stmtexp        goto state 6

State 4

	Stmtexp -> Pos . TExp                               (rule 17)

	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1

	Pos            goto state 14
	TExp           goto state 15
	Var            goto state 16
	Int            goto state 17
	Bool           goto state 18

State 5

	Stmts -> Stmts Stmt .                               (rule 4)

	int            reduce using rule 4
	var            reduce using rule 4
	true           reduce using rule 4
	false          reduce using rule 4
	'('            reduce using rule 4
	')'            reduce using rule 4
	%eof           reduce using rule 4


State 6

	Stmt -> Stmtexp .                                   (rule 5)

	int            reduce using rule 5
	var            reduce using rule 5
	true           reduce using rule 5
	false          reduce using rule 5
	'('            reduce using rule 5
	')'            reduce using rule 5
	%eof           reduce using rule 5


State 7

	Stmt -> '(' . PStmt ')'                             (rule 6)

	def            reduce using rule 1
	if             reduce using rule 1
	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	set            reduce using rule 1
	'('            reduce using rule 1

	Pos            goto state 8
	PStmt          goto state 9
	Def            goto state 10
	If             goto state 11
	LocalSet       goto state 12
	PStmtexp       goto state 13

State 8

	Def -> Pos . def var Vars Returner                  (rule 11)
	If -> Pos . if Exp Returner Returner                (rule 14)
	LocalSet -> Pos . set var Exp                       (rule 15)
	PStmtexp -> Pos . PExp                              (rule 16)

	def            shift, and enter state 28
	if             shift, and enter state 29
	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	set            shift, and enter state 30
	'('            reduce using rule 1

	Pos            goto state 24
	PExp           goto state 25
	Apply          goto state 26
	Infix          goto state 27

State 9

	Stmt -> '(' PStmt . ')'                             (rule 6)

	')'            shift, and enter state 23


State 10

	PStmt -> Def .                                      (rule 7)

	')'            reduce using rule 7


State 11

	PStmt -> If .                                       (rule 8)

	')'            reduce using rule 8


State 12

	PStmt -> LocalSet .                                 (rule 9)

	')'            reduce using rule 9


State 13

	PStmt -> PStmtexp .                                 (rule 10)

	')'            reduce using rule 10


State 14

	Var -> Pos . var                                    (rule 29)
	Int -> Pos . int                                    (rule 30)
	Bool -> Pos . true                                  (rule 31)
	Bool -> Pos . false                                 (rule 32)

	int            shift, and enter state 19
	var            shift, and enter state 20
	true           shift, and enter state 21
	false          shift, and enter state 22


State 15

	Stmtexp -> Pos TExp .                               (rule 17)

	int            reduce using rule 17
	var            reduce using rule 17
	true           reduce using rule 17
	false          reduce using rule 17
	'('            reduce using rule 17
	')'            reduce using rule 17
	%eof           reduce using rule 17


State 16

	TExp -> Var .                                       (rule 18)

	int            reduce using rule 18
	var            reduce using rule 18
	op             reduce using rule 18
	true           reduce using rule 18
	false          reduce using rule 18
	'('            reduce using rule 18
	')'            reduce using rule 18
	%eof           reduce using rule 18


State 17

	TExp -> Int .                                       (rule 19)

	int            reduce using rule 19
	var            reduce using rule 19
	op             reduce using rule 19
	true           reduce using rule 19
	false          reduce using rule 19
	'('            reduce using rule 19
	')'            reduce using rule 19
	%eof           reduce using rule 19


State 18

	TExp -> Bool .                                      (rule 20)

	int            reduce using rule 20
	var            reduce using rule 20
	op             reduce using rule 20
	true           reduce using rule 20
	false          reduce using rule 20
	'('            reduce using rule 20
	')'            reduce using rule 20
	%eof           reduce using rule 20


State 19

	Int -> Pos int .                                    (rule 30)

	int            reduce using rule 30
	var            reduce using rule 30
	op             reduce using rule 30
	true           reduce using rule 30
	false          reduce using rule 30
	'('            reduce using rule 30
	')'            reduce using rule 30
	%eof           reduce using rule 30


State 20

	Var -> Pos var .                                    (rule 29)

	int            reduce using rule 29
	var            reduce using rule 29
	op             reduce using rule 29
	true           reduce using rule 29
	false          reduce using rule 29
	'('            reduce using rule 29
	')'            reduce using rule 29
	%eof           reduce using rule 29


State 21

	Bool -> Pos true .                                  (rule 31)

	int            reduce using rule 31
	var            reduce using rule 31
	op             reduce using rule 31
	true           reduce using rule 31
	false          reduce using rule 31
	'('            reduce using rule 31
	')'            reduce using rule 31
	%eof           reduce using rule 31


State 22

	Bool -> Pos false .                                 (rule 32)

	int            reduce using rule 32
	var            reduce using rule 32
	op             reduce using rule 32
	true           reduce using rule 32
	false          reduce using rule 32
	'('            reduce using rule 32
	')'            reduce using rule 32
	%eof           reduce using rule 32


State 23

	Stmt -> '(' PStmt ')' .                             (rule 6)

	int            reduce using rule 6
	var            reduce using rule 6
	true           reduce using rule 6
	false          reduce using rule 6
	'('            reduce using rule 6
	')'            reduce using rule 6
	%eof           reduce using rule 6


State 24

	Apply -> Pos . Exp Exps                             (rule 25)
	Infix -> Pos . Exp op Exp                           (rule 28)

	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            shift, and enter state 34

	Pos            goto state 14
	TExp           goto state 32
	Exp            goto state 36
	Var            goto state 16
	Int            goto state 17
	Bool           goto state 18

State 25

	PStmtexp -> Pos PExp .                              (rule 16)

	')'            reduce using rule 16


State 26

	PExp -> Apply .                                     (rule 23)

	')'            reduce using rule 23


State 27

	PExp -> Infix .                                     (rule 24)

	')'            reduce using rule 24


State 28

	Def -> Pos def . var Vars Returner                  (rule 11)

	var            shift, and enter state 35


State 29

	If -> Pos if . Exp Returner Returner                (rule 14)

	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            shift, and enter state 34

	Pos            goto state 14
	TExp           goto state 32
	Exp            goto state 33
	Var            goto state 16
	Int            goto state 17
	Bool           goto state 18

State 30

	LocalSet -> Pos set . var Exp                       (rule 15)

	var            shift, and enter state 31


State 31

	LocalSet -> Pos set var . Exp                       (rule 15)

	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            shift, and enter state 34

	Pos            goto state 14
	TExp           goto state 32
	Exp            goto state 43
	Var            goto state 16
	Int            goto state 17
	Bool           goto state 18

State 32

	Exp -> TExp .                                       (rule 21)

	int            reduce using rule 21
	var            reduce using rule 21
	op             reduce using rule 21
	true           reduce using rule 21
	false          reduce using rule 21
	'('            reduce using rule 21
	')'            reduce using rule 21


State 33

	If -> Pos if Exp . Returner Returner                (rule 14)

	'('            reduce using rule 1

	Pos            goto state 41
	Returner       goto state 42

State 34

	Exp -> '(' . PExp ')'                               (rule 22)

	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            reduce using rule 1

	Pos            goto state 24
	PExp           goto state 40
	Apply          goto state 26
	Infix          goto state 27

State 35

	Def -> Pos def var . Vars Returner                  (rule 11)

	var            reduce using rule 12
	'('            reduce using rule 12

	Vars           goto state 39

State 36

	Apply -> Pos Exp . Exps                             (rule 25)
	Infix -> Pos Exp . op Exp                           (rule 28)

	int            reduce using rule 26
	var            reduce using rule 26
	op             shift, and enter state 38
	true           reduce using rule 26
	false          reduce using rule 26
	'('            reduce using rule 26
	')'            reduce using rule 26

	Exps           goto state 37

State 37

	Apply -> Pos Exp Exps .                             (rule 25)
	Exps -> Exps . Exp                                  (rule 27)

	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            shift, and enter state 34
	')'            reduce using rule 25

	Pos            goto state 14
	TExp           goto state 32
	Exp            goto state 50
	Var            goto state 16
	Int            goto state 17
	Bool           goto state 18

State 38

	Infix -> Pos Exp op . Exp                           (rule 28)

	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            shift, and enter state 34

	Pos            goto state 14
	TExp           goto state 32
	Exp            goto state 49
	Var            goto state 16
	Int            goto state 17
	Bool           goto state 18

State 39

	Def -> Pos def var Vars . Returner                  (rule 11)
	Vars -> Vars . var                                  (rule 13)

	var            shift, and enter state 48
	'('            reduce using rule 1

	Pos            goto state 41
	Returner       goto state 47

State 40

	Exp -> '(' PExp . ')'                               (rule 22)

	')'            shift, and enter state 46


State 41

	Returner -> Pos . '(' Stmts ')'                     (rule 33)

	'('            shift, and enter state 45


State 42

	If -> Pos if Exp Returner . Returner                (rule 14)

	'('            reduce using rule 1

	Pos            goto state 41
	Returner       goto state 44

State 43

	LocalSet -> Pos set var Exp .                       (rule 15)

	')'            reduce using rule 15


State 44

	If -> Pos if Exp Returner Returner .                (rule 14)

	')'            reduce using rule 14


State 45

	Returner -> Pos '(' . Stmts ')'                     (rule 33)

	int            reduce using rule 3
	var            reduce using rule 3
	true           reduce using rule 3
	false          reduce using rule 3
	'('            reduce using rule 3
	')'            reduce using rule 3

	Stmts          goto state 51

State 46

	Exp -> '(' PExp ')' .                               (rule 22)

	int            reduce using rule 22
	var            reduce using rule 22
	op             reduce using rule 22
	true           reduce using rule 22
	false          reduce using rule 22
	'('            reduce using rule 22
	')'            reduce using rule 22


State 47

	Def -> Pos def var Vars Returner .                  (rule 11)

	')'            reduce using rule 11


State 48

	Vars -> Vars var .                                  (rule 13)

	var            reduce using rule 13
	'('            reduce using rule 13


State 49

	Infix -> Pos Exp op Exp .                           (rule 28)

	')'            reduce using rule 28


State 50

	Exps -> Exps Exp .                                  (rule 27)

	int            reduce using rule 27
	var            reduce using rule 27
	true           reduce using rule 27
	false          reduce using rule 27
	'('            reduce using rule 27
	')'            reduce using rule 27


State 51

	Stmts -> Stmts . Stmt                               (rule 4)
	Returner -> Pos '(' Stmts . ')'                     (rule 33)

	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            shift, and enter state 7
	')'            shift, and enter state 52

	Pos            goto state 4
	Stmt           goto state 5
	Stmtexp        goto state 6

State 52

	Returner -> Pos '(' Stmts ')' .                     (rule 33)

	'('            reduce using rule 33
	')'            reduce using rule 33


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 34
Number of terminals: 10
Number of non-terminals: 22
Number of states: 53
