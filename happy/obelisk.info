-----------------------------------------------------------------------------
Info file generated by Happy Version 1.18.4 from obelisk.y
-----------------------------------------------------------------------------

state 61 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> Obelisk                            (0)
	Pos ->                                             (1)
	FQType -> Pos FType '#'                            (2)
	SQType -> Pos TypeName '#'                         (3)
	FType -> TypeNames                                 (4)
	TypeNames -> TypeNames '->' TypeName               (5)
	TypeNames -> TypeName                              (6)
	TypeName -> classname                              (7)
	Obelisk -> FDefs                                   (8)
	FDefs -> FDefs '(' FDef ')'                        (9)
	FDefs ->                                           (10)
	Defs -> Defs '(' Def ')'                           (11)
	Defs ->                                            (12)
	FDef -> Pos FQType def var Vars Block WhereClause   (13)
	Def -> FDef                                        (14)
	Def -> Pos SQType let var Exp                      (15)
	WhereClause -> where '(' Defs ')'                  (16)
	WhereClause ->                                     (17)
	Vars ->                                            (18)
	Vars -> Vars var                                   (19)
	If -> Pos if Exp Block Block                       (20)
	TExp -> Var                                        (21)
	TExp -> Int                                        (22)
	TExp -> Bool                                       (23)
	Exp -> TExp                                        (24)
	Exp -> '(' PExp ')'                                (25)
	PExp -> Apply                                      (26)
	PExp -> Infix                                      (27)
	PExp -> If                                         (28)
	Apply -> Pos Exp Exps                              (29)
	Exps ->                                            (30)
	Exps -> Exps Exp                                   (31)
	Infix -> Pos Exp op Exp                            (32)
	Var -> Pos var                                     (33)
	Int -> Pos int                                     (34)
	Bool -> Pos true                                   (35)
	Bool -> Pos false                                  (36)
	Block -> Pos '(' Exps ')'                          (37)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	def            { TDef }
	if             { TIf }
	int            { TInt $$ }
	var            { TVar $$ }
	op             { TOp $$ }
	true           { TTrue }
	false          { TFalse }
	where          { TWhere }
	let            { TConstant }
	classname      { TClassName $$ }
	'->'           { TArrow }
	'#'            { TTypeTerm }
	'('            { TParOpen }
	')'            { TParClose }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	Pos             rule  1
	FQType          rule  2
	SQType          rule  3
	FType           rule  4
	TypeNames       rules 5, 6
	TypeName        rule  7
	Obelisk         rule  8
	FDefs           rules 9, 10
	Defs            rules 11, 12
	FDef            rule  13
	Def             rules 14, 15
	WhereClause     rules 16, 17
	Vars            rules 18, 19
	If              rule  20
	TExp            rules 21, 22, 23
	Exp             rules 24, 25
	PExp            rules 26, 27, 28
	Apply           rule  29
	Exps            rules 30, 31
	Infix           rule  32
	Var             rule  33
	Int             rule  34
	Bool            rules 35, 36
	Block           rule  37

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'('            reduce using rule 10
	%eof           reduce using rule 10

	Obelisk        goto state 2
	FDefs          goto state 3

State 1




State 2

	%start_parse -> Obelisk .                           (rule 0)

	%eof           accept


State 3

	Obelisk -> FDefs .                                  (rule 8)
	FDefs -> FDefs . '(' FDef ')'                       (rule 9)

	'('            shift, and enter state 4
	%eof           reduce using rule 8


State 4

	FDefs -> FDefs '(' . FDef ')'                       (rule 9)

	classname      reduce using rule 1

	Pos            goto state 5
	FDef           goto state 6

State 5

	FDef -> Pos . FQType def var Vars Block WhereClause    (rule 13)

	classname      reduce using rule 1

	Pos            goto state 8
	FQType         goto state 9

State 6

	FDefs -> FDefs '(' FDef . ')'                       (rule 9)

	')'            shift, and enter state 7


State 7

	FDefs -> FDefs '(' FDef ')' .                       (rule 9)

	'('            reduce using rule 9
	%eof           reduce using rule 9


State 8

	FQType -> Pos . FType '#'                           (rule 2)

	classname      shift, and enter state 14

	FType          goto state 11
	TypeNames      goto state 12
	TypeName       goto state 13

State 9

	FDef -> Pos FQType . def var Vars Block WhereClause    (rule 13)

	def            shift, and enter state 10


State 10

	FDef -> Pos FQType def . var Vars Block WhereClause    (rule 13)

	var            shift, and enter state 17


State 11

	FQType -> Pos FType . '#'                           (rule 2)

	'#'            shift, and enter state 16


State 12

	FType -> TypeNames .                                (rule 4)
	TypeNames -> TypeNames . '->' TypeName              (rule 5)

	'->'           shift, and enter state 15
	'#'            reduce using rule 4


State 13

	TypeNames -> TypeName .                             (rule 6)

	'->'           reduce using rule 6
	'#'            reduce using rule 6


State 14

	TypeName -> classname .                             (rule 7)

	'->'           reduce using rule 7
	'#'            reduce using rule 7


State 15

	TypeNames -> TypeNames '->' . TypeName              (rule 5)

	classname      shift, and enter state 14

	TypeName       goto state 19

State 16

	FQType -> Pos FType '#' .                           (rule 2)

	def            reduce using rule 2


State 17

	FDef -> Pos FQType def var . Vars Block WhereClause    (rule 13)

	var            reduce using rule 18
	'('            reduce using rule 18

	Vars           goto state 18

State 18

	FDef -> Pos FQType def var Vars . Block WhereClause    (rule 13)
	Vars -> Vars . var                                  (rule 19)

	var            shift, and enter state 22
	'('            reduce using rule 1

	Pos            goto state 20
	Block          goto state 21

State 19

	TypeNames -> TypeNames '->' TypeName .              (rule 5)

	'->'           reduce using rule 5
	'#'            reduce using rule 5


State 20

	Block -> Pos . '(' Exps ')'                         (rule 37)

	'('            shift, and enter state 25


State 21

	FDef -> Pos FQType def var Vars Block . WhereClause    (rule 13)

	where          shift, and enter state 24
	')'            reduce using rule 17

	WhereClause    goto state 23

State 22

	Vars -> Vars var .                                  (rule 19)

	var            reduce using rule 19
	'('            reduce using rule 19


State 23

	FDef -> Pos FQType def var Vars Block WhereClause .    (rule 13)

	')'            reduce using rule 13


State 24

	WhereClause -> where . '(' Defs ')'                 (rule 16)

	'('            shift, and enter state 27


State 25

	Block -> Pos '(' . Exps ')'                         (rule 37)

	int            reduce using rule 30
	var            reduce using rule 30
	true           reduce using rule 30
	false          reduce using rule 30
	'('            reduce using rule 30
	')'            reduce using rule 30

	Exps           goto state 26

State 26

	Exps -> Exps . Exp                                  (rule 31)
	Block -> Pos '(' Exps . ')'                         (rule 37)

	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            shift, and enter state 35
	')'            shift, and enter state 36

	Pos            goto state 29
	TExp           goto state 30
	Exp            goto state 31
	Var            goto state 32
	Int            goto state 33
	Bool           goto state 34

State 27

	WhereClause -> where '(' . Defs ')'                 (rule 16)

	'('            reduce using rule 12
	')'            reduce using rule 12

	Defs           goto state 28

State 28

	Defs -> Defs . '(' Def ')'                          (rule 11)
	WhereClause -> where '(' Defs . ')'                 (rule 16)

	'('            shift, and enter state 46
	')'            shift, and enter state 47


State 29

	Var -> Pos . var                                    (rule 33)
	Int -> Pos . int                                    (rule 34)
	Bool -> Pos . true                                  (rule 35)
	Bool -> Pos . false                                 (rule 36)

	int            shift, and enter state 42
	var            shift, and enter state 43
	true           shift, and enter state 44
	false          shift, and enter state 45


State 30

	Exp -> TExp .                                       (rule 24)

	int            reduce using rule 24
	var            reduce using rule 24
	op             reduce using rule 24
	true           reduce using rule 24
	false          reduce using rule 24
	'('            reduce using rule 24
	')'            reduce using rule 24


State 31

	Exps -> Exps Exp .                                  (rule 31)

	int            reduce using rule 31
	var            reduce using rule 31
	true           reduce using rule 31
	false          reduce using rule 31
	'('            reduce using rule 31
	')'            reduce using rule 31


State 32

	TExp -> Var .                                       (rule 21)

	int            reduce using rule 21
	var            reduce using rule 21
	op             reduce using rule 21
	true           reduce using rule 21
	false          reduce using rule 21
	'('            reduce using rule 21
	')'            reduce using rule 21


State 33

	TExp -> Int .                                       (rule 22)

	int            reduce using rule 22
	var            reduce using rule 22
	op             reduce using rule 22
	true           reduce using rule 22
	false          reduce using rule 22
	'('            reduce using rule 22
	')'            reduce using rule 22


State 34

	TExp -> Bool .                                      (rule 23)

	int            reduce using rule 23
	var            reduce using rule 23
	op             reduce using rule 23
	true           reduce using rule 23
	false          reduce using rule 23
	'('            reduce using rule 23
	')'            reduce using rule 23


State 35

	Exp -> '(' . PExp ')'                               (rule 25)

	if             reduce using rule 1
	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            reduce using rule 1

	Pos            goto state 37
	If             goto state 38
	PExp           goto state 39
	Apply          goto state 40
	Infix          goto state 41

State 36

	Block -> Pos '(' Exps ')' .                         (rule 37)

	where          reduce using rule 37
	'('            reduce using rule 37
	')'            reduce using rule 37


State 37

	If -> Pos . if Exp Block Block                      (rule 20)
	Apply -> Pos . Exp Exps                             (rule 29)
	Infix -> Pos . Exp op Exp                           (rule 32)

	if             shift, and enter state 53
	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            shift, and enter state 35

	Pos            goto state 29
	TExp           goto state 30
	Exp            goto state 52
	Var            goto state 32
	Int            goto state 33
	Bool           goto state 34

State 38

	PExp -> If .                                        (rule 28)

	')'            reduce using rule 28


State 39

	Exp -> '(' PExp . ')'                               (rule 25)

	')'            shift, and enter state 51


State 40

	PExp -> Apply .                                     (rule 26)

	')'            reduce using rule 26


State 41

	PExp -> Infix .                                     (rule 27)

	')'            reduce using rule 27


State 42

	Int -> Pos int .                                    (rule 34)

	int            reduce using rule 34
	var            reduce using rule 34
	op             reduce using rule 34
	true           reduce using rule 34
	false          reduce using rule 34
	'('            reduce using rule 34
	')'            reduce using rule 34


State 43

	Var -> Pos var .                                    (rule 33)

	int            reduce using rule 33
	var            reduce using rule 33
	op             reduce using rule 33
	true           reduce using rule 33
	false          reduce using rule 33
	'('            reduce using rule 33
	')'            reduce using rule 33


State 44

	Bool -> Pos true .                                  (rule 35)

	int            reduce using rule 35
	var            reduce using rule 35
	op             reduce using rule 35
	true           reduce using rule 35
	false          reduce using rule 35
	'('            reduce using rule 35
	')'            reduce using rule 35


State 45

	Bool -> Pos false .                                 (rule 36)

	int            reduce using rule 36
	var            reduce using rule 36
	op             reduce using rule 36
	true           reduce using rule 36
	false          reduce using rule 36
	'('            reduce using rule 36
	')'            reduce using rule 36


State 46

	Defs -> Defs '(' . Def ')'                          (rule 11)

	classname      reduce using rule 1

	Pos            goto state 48
	FDef           goto state 49
	Def            goto state 50

State 47

	WhereClause -> where '(' Defs ')' .                 (rule 16)

	')'            reduce using rule 16


State 48

	FDef -> Pos . FQType def var Vars Block WhereClause    (rule 13)
	Def -> Pos . SQType let var Exp                     (rule 15)

	classname      reduce using rule 1

	Pos            goto state 58
	FQType         goto state 9
	SQType         goto state 59

State 49

	Def -> FDef .                                       (rule 14)

	')'            reduce using rule 14


State 50

	Defs -> Defs '(' Def . ')'                          (rule 11)

	')'            shift, and enter state 57


State 51

	Exp -> '(' PExp ')' .                               (rule 25)

	int            reduce using rule 25
	var            reduce using rule 25
	op             reduce using rule 25
	true           reduce using rule 25
	false          reduce using rule 25
	'('            reduce using rule 25
	')'            reduce using rule 25


State 52

	Apply -> Pos Exp . Exps                             (rule 29)
	Infix -> Pos Exp . op Exp                           (rule 32)

	int            reduce using rule 30
	var            reduce using rule 30
	op             shift, and enter state 56
	true           reduce using rule 30
	false          reduce using rule 30
	'('            reduce using rule 30
	')'            reduce using rule 30

	Exps           goto state 55

State 53

	If -> Pos if . Exp Block Block                      (rule 20)

	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            shift, and enter state 35

	Pos            goto state 29
	TExp           goto state 30
	Exp            goto state 54
	Var            goto state 32
	Int            goto state 33
	Bool           goto state 34

State 54

	If -> Pos if Exp . Block Block                      (rule 20)

	'('            reduce using rule 1

	Pos            goto state 20
	Block          goto state 63

State 55

	Apply -> Pos Exp Exps .                             (rule 29)
	Exps -> Exps . Exp                                  (rule 31)

	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            shift, and enter state 35
	')'            reduce using rule 29

	Pos            goto state 29
	TExp           goto state 30
	Exp            goto state 31
	Var            goto state 32
	Int            goto state 33
	Bool           goto state 34

State 56

	Infix -> Pos Exp op . Exp                           (rule 32)

	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            shift, and enter state 35

	Pos            goto state 29
	TExp           goto state 30
	Exp            goto state 62
	Var            goto state 32
	Int            goto state 33
	Bool           goto state 34

State 57

	Defs -> Defs '(' Def ')' .                          (rule 11)

	'('            reduce using rule 11
	')'            reduce using rule 11


State 58

	FQType -> Pos . FType '#'                           (rule 2)
	SQType -> Pos . TypeName '#'                        (rule 3)

	classname      shift, and enter state 14

	FType          goto state 11
	TypeNames      goto state 12
	TypeName       goto state 61

State 59

	Def -> Pos SQType . let var Exp                     (rule 15)

	let            shift, and enter state 60


State 60

	Def -> Pos SQType let . var Exp                     (rule 15)

	var            shift, and enter state 66


State 61

	SQType -> Pos TypeName . '#'                        (rule 3)
	TypeNames -> TypeName .                             (rule 6)

	'->'           reduce using rule 6
	'#'            shift, and enter state 65
			(reduce using rule 6)



State 62

	Infix -> Pos Exp op Exp .                           (rule 32)

	')'            reduce using rule 32


State 63

	If -> Pos if Exp Block . Block                      (rule 20)

	'('            reduce using rule 1

	Pos            goto state 20
	Block          goto state 64

State 64

	If -> Pos if Exp Block Block .                      (rule 20)

	')'            reduce using rule 20


State 65

	SQType -> Pos TypeName '#' .                        (rule 3)

	let            reduce using rule 3


State 66

	Def -> Pos SQType let var . Exp                     (rule 15)

	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            shift, and enter state 35

	Pos            goto state 29
	TExp           goto state 30
	Exp            goto state 67
	Var            goto state 32
	Int            goto state 33
	Bool           goto state 34

State 67

	Def -> Pos SQType let var Exp .                     (rule 15)

	')'            reduce using rule 15


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 38
Number of terminals: 14
Number of non-terminals: 25
Number of states: 68
