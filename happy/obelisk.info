-----------------------------------------------------------------------------
Info file generated by Happy Version 1.18.4 from obelisk.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> Obelisk                            (0)
	Pos ->                                             (1)
	QType -> Type '#'                                  (2)
	Type -> TypeNames                                  (3)
	TypeNames -> TypeNames '->' TypeName               (4)
	TypeNames -> TypeName                              (5)
	TypeName -> classname                              (6)
	Obelisk -> FDefs                                   (7)
	FDefs -> FDefs '(' FDef ')'                        (8)
	FDefs ->                                           (9)
	Defs -> Defs '(' Def ')'                           (10)
	Defs ->                                            (11)
	FDef -> Pos QType def var Vars Block WhereClause   (12)
	Def -> FDef                                        (13)
	Def -> Pos QType let var Exp                       (14)
	WhereClause -> where '(' Defs ')'                  (15)
	WhereClause ->                                     (16)
	Vars ->                                            (17)
	Vars -> Vars var                                   (18)
	If -> Pos if Exp Block Block                       (19)
	TExp -> Var                                        (20)
	TExp -> Int                                        (21)
	TExp -> Bool                                       (22)
	Exp -> TExp                                        (23)
	Exp -> '(' PExp ')'                                (24)
	PExp -> Apply                                      (25)
	PExp -> Infix                                      (26)
	PExp -> If                                         (27)
	Apply -> Pos Exp Exps                              (28)
	Exps ->                                            (29)
	Exps -> Exps Exp                                   (30)
	Infix -> Pos Exp op Exp                            (31)
	Var -> Pos var                                     (32)
	Int -> Pos int                                     (33)
	Bool -> Pos true                                   (34)
	Bool -> Pos false                                  (35)
	Block -> Pos '(' Exps ')'                          (36)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	def            { TDef }
	if             { TIf }
	int            { TInt $$ }
	var            { TVar $$ }
	op             { TOp $$ }
	true           { TTrue }
	false          { TFalse }
	where          { TWhere }
	let            { TConstant }
	classname      { TClassName $$ }
	'->'           { TArrow }
	'#'            { TTypeTerm }
	'('            { TParOpen }
	')'            { TParClose }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	Pos             rule  1
	QType           rule  2
	Type            rule  3
	TypeNames       rules 4, 5
	TypeName        rule  6
	Obelisk         rule  7
	FDefs           rules 8, 9
	Defs            rules 10, 11
	FDef            rule  12
	Def             rules 13, 14
	WhereClause     rules 15, 16
	Vars            rules 17, 18
	If              rule  19
	TExp            rules 20, 21, 22
	Exp             rules 23, 24
	PExp            rules 25, 26, 27
	Apply           rule  28
	Exps            rules 29, 30
	Infix           rule  31
	Var             rule  32
	Int             rule  33
	Bool            rules 34, 35
	Block           rule  36

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'('            reduce using rule 9
	%eof           reduce using rule 9

	Obelisk        goto state 2
	FDefs          goto state 3

State 1




State 2

	%start_parse -> Obelisk .                           (rule 0)

	%eof           accept


State 3

	Obelisk -> FDefs .                                  (rule 7)
	FDefs -> FDefs . '(' FDef ')'                       (rule 8)

	'('            shift, and enter state 4
	%eof           reduce using rule 7


State 4

	FDefs -> FDefs '(' . FDef ')'                       (rule 8)

	classname      reduce using rule 1

	Pos            goto state 5
	FDef           goto state 6

State 5

	FDef -> Pos . QType def var Vars Block WhereClause    (rule 12)

	classname      shift, and enter state 12

	QType          goto state 8
	Type           goto state 9
	TypeNames      goto state 10
	TypeName       goto state 11

State 6

	FDefs -> FDefs '(' FDef . ')'                       (rule 8)

	')'            shift, and enter state 7


State 7

	FDefs -> FDefs '(' FDef ')' .                       (rule 8)

	'('            reduce using rule 8
	%eof           reduce using rule 8


State 8

	FDef -> Pos QType . def var Vars Block WhereClause    (rule 12)

	def            shift, and enter state 15


State 9

	QType -> Type . '#'                                 (rule 2)

	'#'            shift, and enter state 14


State 10

	Type -> TypeNames .                                 (rule 3)
	TypeNames -> TypeNames . '->' TypeName              (rule 4)

	'->'           shift, and enter state 13
	'#'            reduce using rule 3


State 11

	TypeNames -> TypeName .                             (rule 5)

	'->'           reduce using rule 5
	'#'            reduce using rule 5


State 12

	TypeName -> classname .                             (rule 6)

	'->'           reduce using rule 6
	'#'            reduce using rule 6


State 13

	TypeNames -> TypeNames '->' . TypeName              (rule 4)

	classname      shift, and enter state 12

	TypeName       goto state 17

State 14

	QType -> Type '#' .                                 (rule 2)

	def            reduce using rule 2
	let            reduce using rule 2


State 15

	FDef -> Pos QType def . var Vars Block WhereClause    (rule 12)

	var            shift, and enter state 16


State 16

	FDef -> Pos QType def var . Vars Block WhereClause    (rule 12)

	var            reduce using rule 17
	'('            reduce using rule 17

	Vars           goto state 18

State 17

	TypeNames -> TypeNames '->' TypeName .              (rule 4)

	'->'           reduce using rule 4
	'#'            reduce using rule 4


State 18

	FDef -> Pos QType def var Vars . Block WhereClause    (rule 12)
	Vars -> Vars . var                                  (rule 18)

	var            shift, and enter state 21
	'('            reduce using rule 1

	Pos            goto state 19
	Block          goto state 20

State 19

	Block -> Pos . '(' Exps ')'                         (rule 36)

	'('            shift, and enter state 24


State 20

	FDef -> Pos QType def var Vars Block . WhereClause    (rule 12)

	where          shift, and enter state 23
	')'            reduce using rule 16

	WhereClause    goto state 22

State 21

	Vars -> Vars var .                                  (rule 18)

	var            reduce using rule 18
	'('            reduce using rule 18


State 22

	FDef -> Pos QType def var Vars Block WhereClause .    (rule 12)

	')'            reduce using rule 12


State 23

	WhereClause -> where . '(' Defs ')'                 (rule 15)

	'('            shift, and enter state 26


State 24

	Block -> Pos '(' . Exps ')'                         (rule 36)

	int            reduce using rule 29
	var            reduce using rule 29
	true           reduce using rule 29
	false          reduce using rule 29
	'('            reduce using rule 29
	')'            reduce using rule 29

	Exps           goto state 25

State 25

	Exps -> Exps . Exp                                  (rule 30)
	Block -> Pos '(' Exps . ')'                         (rule 36)

	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            shift, and enter state 34
	')'            shift, and enter state 35

	Pos            goto state 28
	TExp           goto state 29
	Exp            goto state 30
	Var            goto state 31
	Int            goto state 32
	Bool           goto state 33

State 26

	WhereClause -> where '(' . Defs ')'                 (rule 15)

	'('            reduce using rule 11
	')'            reduce using rule 11

	Defs           goto state 27

State 27

	Defs -> Defs . '(' Def ')'                          (rule 10)
	WhereClause -> where '(' Defs . ')'                 (rule 15)

	'('            shift, and enter state 45
	')'            shift, and enter state 46


State 28

	Var -> Pos . var                                    (rule 32)
	Int -> Pos . int                                    (rule 33)
	Bool -> Pos . true                                  (rule 34)
	Bool -> Pos . false                                 (rule 35)

	int            shift, and enter state 41
	var            shift, and enter state 42
	true           shift, and enter state 43
	false          shift, and enter state 44


State 29

	Exp -> TExp .                                       (rule 23)

	int            reduce using rule 23
	var            reduce using rule 23
	op             reduce using rule 23
	true           reduce using rule 23
	false          reduce using rule 23
	'('            reduce using rule 23
	')'            reduce using rule 23


State 30

	Exps -> Exps Exp .                                  (rule 30)

	int            reduce using rule 30
	var            reduce using rule 30
	true           reduce using rule 30
	false          reduce using rule 30
	'('            reduce using rule 30
	')'            reduce using rule 30


State 31

	TExp -> Var .                                       (rule 20)

	int            reduce using rule 20
	var            reduce using rule 20
	op             reduce using rule 20
	true           reduce using rule 20
	false          reduce using rule 20
	'('            reduce using rule 20
	')'            reduce using rule 20


State 32

	TExp -> Int .                                       (rule 21)

	int            reduce using rule 21
	var            reduce using rule 21
	op             reduce using rule 21
	true           reduce using rule 21
	false          reduce using rule 21
	'('            reduce using rule 21
	')'            reduce using rule 21


State 33

	TExp -> Bool .                                      (rule 22)

	int            reduce using rule 22
	var            reduce using rule 22
	op             reduce using rule 22
	true           reduce using rule 22
	false          reduce using rule 22
	'('            reduce using rule 22
	')'            reduce using rule 22


State 34

	Exp -> '(' . PExp ')'                               (rule 24)

	if             reduce using rule 1
	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            reduce using rule 1

	Pos            goto state 36
	If             goto state 37
	PExp           goto state 38
	Apply          goto state 39
	Infix          goto state 40

State 35

	Block -> Pos '(' Exps ')' .                         (rule 36)

	where          reduce using rule 36
	'('            reduce using rule 36
	')'            reduce using rule 36


State 36

	If -> Pos . if Exp Block Block                      (rule 19)
	Apply -> Pos . Exp Exps                             (rule 28)
	Infix -> Pos . Exp op Exp                           (rule 31)

	if             shift, and enter state 52
	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            shift, and enter state 34

	Pos            goto state 28
	TExp           goto state 29
	Exp            goto state 51
	Var            goto state 31
	Int            goto state 32
	Bool           goto state 33

State 37

	PExp -> If .                                        (rule 27)

	')'            reduce using rule 27


State 38

	Exp -> '(' PExp . ')'                               (rule 24)

	')'            shift, and enter state 50


State 39

	PExp -> Apply .                                     (rule 25)

	')'            reduce using rule 25


State 40

	PExp -> Infix .                                     (rule 26)

	')'            reduce using rule 26


State 41

	Int -> Pos int .                                    (rule 33)

	int            reduce using rule 33
	var            reduce using rule 33
	op             reduce using rule 33
	true           reduce using rule 33
	false          reduce using rule 33
	'('            reduce using rule 33
	')'            reduce using rule 33


State 42

	Var -> Pos var .                                    (rule 32)

	int            reduce using rule 32
	var            reduce using rule 32
	op             reduce using rule 32
	true           reduce using rule 32
	false          reduce using rule 32
	'('            reduce using rule 32
	')'            reduce using rule 32


State 43

	Bool -> Pos true .                                  (rule 34)

	int            reduce using rule 34
	var            reduce using rule 34
	op             reduce using rule 34
	true           reduce using rule 34
	false          reduce using rule 34
	'('            reduce using rule 34
	')'            reduce using rule 34


State 44

	Bool -> Pos false .                                 (rule 35)

	int            reduce using rule 35
	var            reduce using rule 35
	op             reduce using rule 35
	true           reduce using rule 35
	false          reduce using rule 35
	'('            reduce using rule 35
	')'            reduce using rule 35


State 45

	Defs -> Defs '(' . Def ')'                          (rule 10)

	classname      reduce using rule 1

	Pos            goto state 47
	FDef           goto state 48
	Def            goto state 49

State 46

	WhereClause -> where '(' Defs ')' .                 (rule 15)

	')'            reduce using rule 15


State 47

	FDef -> Pos . QType def var Vars Block WhereClause    (rule 12)
	Def -> Pos . QType let var Exp                      (rule 14)

	classname      shift, and enter state 12

	QType          goto state 57
	Type           goto state 9
	TypeNames      goto state 10
	TypeName       goto state 11

State 48

	Def -> FDef .                                       (rule 13)

	')'            reduce using rule 13


State 49

	Defs -> Defs '(' Def . ')'                          (rule 10)

	')'            shift, and enter state 56


State 50

	Exp -> '(' PExp ')' .                               (rule 24)

	int            reduce using rule 24
	var            reduce using rule 24
	op             reduce using rule 24
	true           reduce using rule 24
	false          reduce using rule 24
	'('            reduce using rule 24
	')'            reduce using rule 24


State 51

	Apply -> Pos Exp . Exps                             (rule 28)
	Infix -> Pos Exp . op Exp                           (rule 31)

	int            reduce using rule 29
	var            reduce using rule 29
	op             shift, and enter state 55
	true           reduce using rule 29
	false          reduce using rule 29
	'('            reduce using rule 29
	')'            reduce using rule 29

	Exps           goto state 54

State 52

	If -> Pos if . Exp Block Block                      (rule 19)

	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            shift, and enter state 34

	Pos            goto state 28
	TExp           goto state 29
	Exp            goto state 53
	Var            goto state 31
	Int            goto state 32
	Bool           goto state 33

State 53

	If -> Pos if Exp . Block Block                      (rule 19)

	'('            reduce using rule 1

	Pos            goto state 19
	Block          goto state 60

State 54

	Apply -> Pos Exp Exps .                             (rule 28)
	Exps -> Exps . Exp                                  (rule 30)

	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            shift, and enter state 34
	')'            reduce using rule 28

	Pos            goto state 28
	TExp           goto state 29
	Exp            goto state 30
	Var            goto state 31
	Int            goto state 32
	Bool           goto state 33

State 55

	Infix -> Pos Exp op . Exp                           (rule 31)

	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            shift, and enter state 34

	Pos            goto state 28
	TExp           goto state 29
	Exp            goto state 59
	Var            goto state 31
	Int            goto state 32
	Bool           goto state 33

State 56

	Defs -> Defs '(' Def ')' .                          (rule 10)

	'('            reduce using rule 10
	')'            reduce using rule 10


State 57

	FDef -> Pos QType . def var Vars Block WhereClause    (rule 12)
	Def -> Pos QType . let var Exp                      (rule 14)

	def            shift, and enter state 15
	let            shift, and enter state 58


State 58

	Def -> Pos QType let . var Exp                      (rule 14)

	var            shift, and enter state 62


State 59

	Infix -> Pos Exp op Exp .                           (rule 31)

	')'            reduce using rule 31


State 60

	If -> Pos if Exp Block . Block                      (rule 19)

	'('            reduce using rule 1

	Pos            goto state 19
	Block          goto state 61

State 61

	If -> Pos if Exp Block Block .                      (rule 19)

	')'            reduce using rule 19


State 62

	Def -> Pos QType let var . Exp                      (rule 14)

	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            shift, and enter state 34

	Pos            goto state 28
	TExp           goto state 29
	Exp            goto state 63
	Var            goto state 31
	Int            goto state 32
	Bool           goto state 33

State 63

	Def -> Pos QType let var Exp .                      (rule 14)

	')'            reduce using rule 14


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 37
Number of terminals: 14
Number of non-terminals: 24
Number of states: 64
