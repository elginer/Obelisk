-----------------------------------------------------------------------------
Info file generated by Happy Version 1.18.4 from obelisk.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> Obelisk                            (0)
	Pos ->                                             (1)
	Obelisk -> Defs                                    (2)
	Defs -> Defs '(' Def ')'                           (3)
	Defs ->                                            (4)
	Def -> Pos def var Vars Block WhereClause          (5)
	Def -> Pos ':' var Exp                             (6)
	WhereClause -> where '(' Defs ')'                  (7)
	WhereClause ->                                     (8)
	Vars ->                                            (9)
	Vars -> Vars var                                   (10)
	If -> Pos if Exp Block Block                       (11)
	TExp -> Var                                        (12)
	TExp -> Int                                        (13)
	TExp -> Bool                                       (14)
	Exp -> TExp                                        (15)
	Exp -> '(' PExp ')'                                (16)
	PExp -> Apply                                      (17)
	PExp -> Infix                                      (18)
	PExp -> If                                         (19)
	Apply -> Pos Exp Exps                              (20)
	Exps ->                                            (21)
	Exps -> Exps Exp                                   (22)
	Infix -> Pos Exp op Exp                            (23)
	Var -> Pos var                                     (24)
	Int -> Pos int                                     (25)
	Bool -> Pos true                                   (26)
	Bool -> Pos false                                  (27)
	Block -> Pos '(' Exps ')'                          (28)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	def            { TDef }
	if             { TIf }
	int            { TInt $$ }
	var            { TVar $$ }
	op             { TOp $$ }
	true           { TTrue }
	false          { TFalse }
	where          { TWhere }
	':'            { TConstant }
	'('            { TParOpen }
	')'            { TParClose }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	Pos             rule  1
	Obelisk         rule  2
	Defs            rules 3, 4
	Def             rules 5, 6
	WhereClause     rules 7, 8
	Vars            rules 9, 10
	If              rule  11
	TExp            rules 12, 13, 14
	Exp             rules 15, 16
	PExp            rules 17, 18, 19
	Apply           rule  20
	Exps            rules 21, 22
	Infix           rule  23
	Var             rule  24
	Int             rule  25
	Bool            rules 26, 27
	Block           rule  28

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'('            reduce using rule 4
	%eof           reduce using rule 4

	Obelisk        goto state 2
	Defs           goto state 3

State 1




State 2

	%start_parse -> Obelisk .                           (rule 0)

	%eof           accept


State 3

	Obelisk -> Defs .                                   (rule 2)
	Defs -> Defs . '(' Def ')'                          (rule 3)

	'('            shift, and enter state 4
	%eof           reduce using rule 2


State 4

	Defs -> Defs '(' . Def ')'                          (rule 3)

	def            reduce using rule 1
	':'            reduce using rule 1

	Pos            goto state 5
	Def            goto state 6

State 5

	Def -> Pos . def var Vars Block WhereClause         (rule 5)
	Def -> Pos . ':' var Exp                            (rule 6)

	def            shift, and enter state 8
	':'            shift, and enter state 9


State 6

	Defs -> Defs '(' Def . ')'                          (rule 3)

	')'            shift, and enter state 7


State 7

	Defs -> Defs '(' Def ')' .                          (rule 3)

	'('            reduce using rule 3
	')'            reduce using rule 3
	%eof           reduce using rule 3


State 8

	Def -> Pos def . var Vars Block WhereClause         (rule 5)

	var            shift, and enter state 11


State 9

	Def -> Pos ':' . var Exp                            (rule 6)

	var            shift, and enter state 10


State 10

	Def -> Pos ':' var . Exp                            (rule 6)

	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            shift, and enter state 19

	Pos            goto state 13
	TExp           goto state 14
	Exp            goto state 15
	Var            goto state 16
	Int            goto state 17
	Bool           goto state 18

State 11

	Def -> Pos def var . Vars Block WhereClause         (rule 5)

	var            reduce using rule 9
	'('            reduce using rule 9

	Vars           goto state 12

State 12

	Def -> Pos def var Vars . Block WhereClause         (rule 5)
	Vars -> Vars . var                                  (rule 10)

	var            shift, and enter state 31
	'('            reduce using rule 1

	Pos            goto state 29
	Block          goto state 30

State 13

	Var -> Pos . var                                    (rule 24)
	Int -> Pos . int                                    (rule 25)
	Bool -> Pos . true                                  (rule 26)
	Bool -> Pos . false                                 (rule 27)

	int            shift, and enter state 25
	var            shift, and enter state 26
	true           shift, and enter state 27
	false          shift, and enter state 28


State 14

	Exp -> TExp .                                       (rule 15)

	int            reduce using rule 15
	var            reduce using rule 15
	op             reduce using rule 15
	true           reduce using rule 15
	false          reduce using rule 15
	'('            reduce using rule 15
	')'            reduce using rule 15


State 15

	Def -> Pos ':' var Exp .                            (rule 6)

	')'            reduce using rule 6


State 16

	TExp -> Var .                                       (rule 12)

	int            reduce using rule 12
	var            reduce using rule 12
	op             reduce using rule 12
	true           reduce using rule 12
	false          reduce using rule 12
	'('            reduce using rule 12
	')'            reduce using rule 12


State 17

	TExp -> Int .                                       (rule 13)

	int            reduce using rule 13
	var            reduce using rule 13
	op             reduce using rule 13
	true           reduce using rule 13
	false          reduce using rule 13
	'('            reduce using rule 13
	')'            reduce using rule 13


State 18

	TExp -> Bool .                                      (rule 14)

	int            reduce using rule 14
	var            reduce using rule 14
	op             reduce using rule 14
	true           reduce using rule 14
	false          reduce using rule 14
	'('            reduce using rule 14
	')'            reduce using rule 14


State 19

	Exp -> '(' . PExp ')'                               (rule 16)

	if             reduce using rule 1
	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            reduce using rule 1

	Pos            goto state 20
	If             goto state 21
	PExp           goto state 22
	Apply          goto state 23
	Infix          goto state 24

State 20

	If -> Pos . if Exp Block Block                      (rule 11)
	Apply -> Pos . Exp Exps                             (rule 20)
	Infix -> Pos . Exp op Exp                           (rule 23)

	if             shift, and enter state 37
	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            shift, and enter state 19

	Pos            goto state 13
	TExp           goto state 14
	Exp            goto state 36
	Var            goto state 16
	Int            goto state 17
	Bool           goto state 18

State 21

	PExp -> If .                                        (rule 19)

	')'            reduce using rule 19


State 22

	Exp -> '(' PExp . ')'                               (rule 16)

	')'            shift, and enter state 35


State 23

	PExp -> Apply .                                     (rule 17)

	')'            reduce using rule 17


State 24

	PExp -> Infix .                                     (rule 18)

	')'            reduce using rule 18


State 25

	Int -> Pos int .                                    (rule 25)

	int            reduce using rule 25
	var            reduce using rule 25
	op             reduce using rule 25
	true           reduce using rule 25
	false          reduce using rule 25
	'('            reduce using rule 25
	')'            reduce using rule 25


State 26

	Var -> Pos var .                                    (rule 24)

	int            reduce using rule 24
	var            reduce using rule 24
	op             reduce using rule 24
	true           reduce using rule 24
	false          reduce using rule 24
	'('            reduce using rule 24
	')'            reduce using rule 24


State 27

	Bool -> Pos true .                                  (rule 26)

	int            reduce using rule 26
	var            reduce using rule 26
	op             reduce using rule 26
	true           reduce using rule 26
	false          reduce using rule 26
	'('            reduce using rule 26
	')'            reduce using rule 26


State 28

	Bool -> Pos false .                                 (rule 27)

	int            reduce using rule 27
	var            reduce using rule 27
	op             reduce using rule 27
	true           reduce using rule 27
	false          reduce using rule 27
	'('            reduce using rule 27
	')'            reduce using rule 27


State 29

	Block -> Pos . '(' Exps ')'                         (rule 28)

	'('            shift, and enter state 34


State 30

	Def -> Pos def var Vars Block . WhereClause         (rule 5)

	where          shift, and enter state 33
	')'            reduce using rule 8

	WhereClause    goto state 32

State 31

	Vars -> Vars var .                                  (rule 10)

	var            reduce using rule 10
	'('            reduce using rule 10


State 32

	Def -> Pos def var Vars Block WhereClause .         (rule 5)

	')'            reduce using rule 5


State 33

	WhereClause -> where . '(' Defs ')'                 (rule 7)

	'('            shift, and enter state 42


State 34

	Block -> Pos '(' . Exps ')'                         (rule 28)

	int            reduce using rule 21
	var            reduce using rule 21
	true           reduce using rule 21
	false          reduce using rule 21
	'('            reduce using rule 21
	')'            reduce using rule 21

	Exps           goto state 41

State 35

	Exp -> '(' PExp ')' .                               (rule 16)

	int            reduce using rule 16
	var            reduce using rule 16
	op             reduce using rule 16
	true           reduce using rule 16
	false          reduce using rule 16
	'('            reduce using rule 16
	')'            reduce using rule 16


State 36

	Apply -> Pos Exp . Exps                             (rule 20)
	Infix -> Pos Exp . op Exp                           (rule 23)

	int            reduce using rule 21
	var            reduce using rule 21
	op             shift, and enter state 40
	true           reduce using rule 21
	false          reduce using rule 21
	'('            reduce using rule 21
	')'            reduce using rule 21

	Exps           goto state 39

State 37

	If -> Pos if . Exp Block Block                      (rule 11)

	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            shift, and enter state 19

	Pos            goto state 13
	TExp           goto state 14
	Exp            goto state 38
	Var            goto state 16
	Int            goto state 17
	Bool           goto state 18

State 38

	If -> Pos if Exp . Block Block                      (rule 11)

	'('            reduce using rule 1

	Pos            goto state 29
	Block          goto state 47

State 39

	Apply -> Pos Exp Exps .                             (rule 20)
	Exps -> Exps . Exp                                  (rule 22)

	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            shift, and enter state 19
	')'            reduce using rule 20

	Pos            goto state 13
	TExp           goto state 14
	Exp            goto state 44
	Var            goto state 16
	Int            goto state 17
	Bool           goto state 18

State 40

	Infix -> Pos Exp op . Exp                           (rule 23)

	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            shift, and enter state 19

	Pos            goto state 13
	TExp           goto state 14
	Exp            goto state 46
	Var            goto state 16
	Int            goto state 17
	Bool           goto state 18

State 41

	Exps -> Exps . Exp                                  (rule 22)
	Block -> Pos '(' Exps . ')'                         (rule 28)

	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            shift, and enter state 19
	')'            shift, and enter state 45

	Pos            goto state 13
	TExp           goto state 14
	Exp            goto state 44
	Var            goto state 16
	Int            goto state 17
	Bool           goto state 18

State 42

	WhereClause -> where '(' . Defs ')'                 (rule 7)

	'('            reduce using rule 4
	')'            reduce using rule 4

	Defs           goto state 43

State 43

	Defs -> Defs . '(' Def ')'                          (rule 3)
	WhereClause -> where '(' Defs . ')'                 (rule 7)

	'('            shift, and enter state 4
	')'            shift, and enter state 49


State 44

	Exps -> Exps Exp .                                  (rule 22)

	int            reduce using rule 22
	var            reduce using rule 22
	true           reduce using rule 22
	false          reduce using rule 22
	'('            reduce using rule 22
	')'            reduce using rule 22


State 45

	Block -> Pos '(' Exps ')' .                         (rule 28)

	where          reduce using rule 28
	'('            reduce using rule 28
	')'            reduce using rule 28


State 46

	Infix -> Pos Exp op Exp .                           (rule 23)

	')'            reduce using rule 23


State 47

	If -> Pos if Exp Block . Block                      (rule 11)

	'('            reduce using rule 1

	Pos            goto state 29
	Block          goto state 48

State 48

	If -> Pos if Exp Block Block .                      (rule 11)

	')'            reduce using rule 11


State 49

	WhereClause -> where '(' Defs ')' .                 (rule 7)

	')'            reduce using rule 7


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 29
Number of terminals: 11
Number of non-terminals: 18
Number of states: 50
