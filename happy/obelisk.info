-----------------------------------------------------------------------------
Info file generated by Happy Version 1.18.4 from obelisk.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> Obelisk                            (0)
	Pos ->                                             (1)
	QType -> FQType                                    (2)
	QType -> SQType                                    (3)
	FQType -> Pos FType '#'                            (4)
	SQType -> Pos SType '#'                            (5)
	FType -> '(' ArgTypes ')'                          (6)
	SType -> TypeName                                  (7)
	ArgTypes -> TypeNames                              (8)
	TypeNames -> TypeNames '->' TypeName               (9)
	TypeNames -> TypeName                              (10)
	TypeName -> classname                              (11)
	Obelisk -> FDefs                                   (12)
	FDefs -> FDefs FDef                                (13)
	FDefs ->                                           (14)
	Defs -> Defs Def                                   (15)
	Defs ->                                            (16)
	FDef -> Pos FQType def var Vars Block WhereClause   (17)
	Def -> FDef                                        (18)
	Def -> Pos QType let var Exp                       (19)
	WhereClause -> where '{' Defs '}'                  (20)
	WhereClause ->                                     (21)
	Vars ->                                            (22)
	Vars -> Vars var                                   (23)
	If -> Pos if Exp Block Block                       (24)
	TExp -> Var                                        (25)
	TExp -> Int                                        (26)
	TExp -> Bool                                       (27)
	TExp -> Char                                       (28)
	Exp -> TExp                                        (29)
	Exp -> If                                          (30)
	Exp -> '(' PExp ')'                                (31)
	PExp -> Apply                                      (32)
	PExp -> Infix                                      (33)
	Apply -> Pos Exp Exps                              (34)
	Exps ->                                            (35)
	Exps -> Exps Exp                                   (36)
	Infix -> Pos Exp op Exp                            (37)
	Var -> Pos var                                     (38)
	Int -> Pos int                                     (39)
	Bool -> Pos true                                   (40)
	Bool -> Pos false                                  (41)
	Char -> Pos char                                   (42)
	Block -> Pos '{' Exps WhereClause '}'              (43)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	def            { TDef }
	if             { TIf }
	int            { TInt $$ }
	var            { TVar $$ }
	op             { TOp $$ }
	true           { TTrue }
	false          { TFalse }
	where          { TWhere }
	let            { TConstant }
	classname      { TClassName $$ }
	'->'           { TArrow }
	'#'            { TTypeTerm }
	'('            { TParOpen }
	')'            { TParClose }
	'{'            { TBraceOpen }
	'}'            { TBraceClose }
	char           { TChar $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	Pos             rule  1
	QType           rules 2, 3
	FQType          rule  4
	SQType          rule  5
	FType           rule  6
	SType           rule  7
	ArgTypes        rule  8
	TypeNames       rules 9, 10
	TypeName        rule  11
	Obelisk         rule  12
	FDefs           rules 13, 14
	Defs            rules 15, 16
	FDef            rule  17
	Def             rules 18, 19
	WhereClause     rules 20, 21
	Vars            rules 22, 23
	If              rule  24
	TExp            rules 25, 26, 27, 28
	Exp             rules 29, 30, 31
	PExp            rules 32, 33
	Apply           rule  34
	Exps            rules 35, 36
	Infix           rule  37
	Var             rule  38
	Int             rule  39
	Bool            rules 40, 41
	Char            rule  42
	Block           rule  43

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'('            reduce using rule 14
	%eof           reduce using rule 14

	Obelisk        goto state 2
	FDefs          goto state 3

State 1




State 2

	%start_parse -> Obelisk .                           (rule 0)

	%eof           accept


State 3

	Obelisk -> FDefs .                                  (rule 12)
	FDefs -> FDefs . FDef                               (rule 13)

	'('            reduce using rule 1
	%eof           reduce using rule 12

	Pos            goto state 4
	FDef           goto state 5

State 4

	FDef -> Pos . FQType def var Vars Block WhereClause    (rule 17)

	'('            reduce using rule 1

	Pos            goto state 6
	FQType         goto state 7

State 5

	FDefs -> FDefs FDef .                               (rule 13)

	'('            reduce using rule 13
	%eof           reduce using rule 13


State 6

	FQType -> Pos . FType '#'                           (rule 4)

	'('            shift, and enter state 10

	FType          goto state 9

State 7

	FDef -> Pos FQType . def var Vars Block WhereClause    (rule 17)

	def            shift, and enter state 8


State 8

	FDef -> Pos FQType def . var Vars Block WhereClause    (rule 17)

	var            shift, and enter state 16


State 9

	FQType -> Pos FType . '#'                           (rule 4)

	'#'            shift, and enter state 15


State 10

	FType -> '(' . ArgTypes ')'                         (rule 6)

	classname      shift, and enter state 14

	ArgTypes       goto state 11
	TypeNames      goto state 12
	TypeName       goto state 13

State 11

	FType -> '(' ArgTypes . ')'                         (rule 6)

	')'            shift, and enter state 19


State 12

	ArgTypes -> TypeNames .                             (rule 8)
	TypeNames -> TypeNames . '->' TypeName              (rule 9)

	'->'           shift, and enter state 18
	')'            reduce using rule 8


State 13

	TypeNames -> TypeName .                             (rule 10)

	'->'           reduce using rule 10
	')'            reduce using rule 10


State 14

	TypeName -> classname .                             (rule 11)

	'->'           reduce using rule 11
	'#'            reduce using rule 11
	')'            reduce using rule 11


State 15

	FQType -> Pos FType '#' .                           (rule 4)

	def            reduce using rule 4
	let            reduce using rule 4


State 16

	FDef -> Pos FQType def var . Vars Block WhereClause    (rule 17)

	var            reduce using rule 22
	'{'            reduce using rule 22

	Vars           goto state 17

State 17

	FDef -> Pos FQType def var Vars . Block WhereClause    (rule 17)
	Vars -> Vars . var                                  (rule 23)

	var            shift, and enter state 23
	'{'            reduce using rule 1

	Pos            goto state 21
	Block          goto state 22

State 18

	TypeNames -> TypeNames '->' . TypeName              (rule 9)

	classname      shift, and enter state 14

	TypeName       goto state 20

State 19

	FType -> '(' ArgTypes ')' .                         (rule 6)

	'#'            reduce using rule 6


State 20

	TypeNames -> TypeNames '->' TypeName .              (rule 9)

	'->'           reduce using rule 9
	')'            reduce using rule 9


State 21

	Block -> Pos . '{' Exps WhereClause '}'             (rule 43)

	'{'            shift, and enter state 26


State 22

	FDef -> Pos FQType def var Vars Block . WhereClause    (rule 17)

	where          shift, and enter state 25
	classname      reduce using rule 21
	'('            reduce using rule 21
	'}'            reduce using rule 21
	%eof           reduce using rule 21

	WhereClause    goto state 24

State 23

	Vars -> Vars var .                                  (rule 23)

	var            reduce using rule 23
	'{'            reduce using rule 23


State 24

	FDef -> Pos FQType def var Vars Block WhereClause .    (rule 17)

	classname      reduce using rule 17
	'('            reduce using rule 17
	'}'            reduce using rule 17
	%eof           reduce using rule 17


State 25

	WhereClause -> where . '{' Defs '}'                 (rule 20)

	'{'            shift, and enter state 28


State 26

	Block -> Pos '{' . Exps WhereClause '}'             (rule 43)

	if             reduce using rule 35
	int            reduce using rule 35
	var            reduce using rule 35
	true           reduce using rule 35
	false          reduce using rule 35
	where          reduce using rule 35
	'('            reduce using rule 35
	'}'            reduce using rule 35
	char           reduce using rule 35

	Exps           goto state 27

State 27

	Exps -> Exps . Exp                                  (rule 36)
	Block -> Pos '{' Exps . WhereClause '}'             (rule 43)

	if             reduce using rule 1
	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	where          shift, and enter state 25
	'('            shift, and enter state 39
	'}'            reduce using rule 21
	char           reduce using rule 1

	Pos            goto state 30
	WhereClause    goto state 31
	If             goto state 32
	TExp           goto state 33
	Exp            goto state 34
	Var            goto state 35
	Int            goto state 36
	Bool           goto state 37
	Char           goto state 38

State 28

	WhereClause -> where '{' . Defs '}'                 (rule 20)

	classname      reduce using rule 16
	'('            reduce using rule 16
	'}'            reduce using rule 16

	Defs           goto state 29

State 29

	Defs -> Defs . Def                                  (rule 15)
	WhereClause -> where '{' Defs . '}'                 (rule 20)

	classname      reduce using rule 1
	'('            reduce using rule 1
	'}'            shift, and enter state 54

	Pos            goto state 51
	FDef           goto state 52
	Def            goto state 53

State 30

	If -> Pos . if Exp Block Block                      (rule 24)
	Var -> Pos . var                                    (rule 38)
	Int -> Pos . int                                    (rule 39)
	Bool -> Pos . true                                  (rule 40)
	Bool -> Pos . false                                 (rule 41)
	Char -> Pos . char                                  (rule 42)

	if             shift, and enter state 45
	int            shift, and enter state 46
	var            shift, and enter state 47
	true           shift, and enter state 48
	false          shift, and enter state 49
	char           shift, and enter state 50


State 31

	Block -> Pos '{' Exps WhereClause . '}'             (rule 43)

	'}'            shift, and enter state 44


State 32

	Exp -> If .                                         (rule 30)

	if             reduce using rule 30
	int            reduce using rule 30
	var            reduce using rule 30
	op             reduce using rule 30
	true           reduce using rule 30
	false          reduce using rule 30
	where          reduce using rule 30
	classname      reduce using rule 30
	'('            reduce using rule 30
	')'            reduce using rule 30
	'{'            reduce using rule 30
	'}'            reduce using rule 30
	char           reduce using rule 30


State 33

	Exp -> TExp .                                       (rule 29)

	if             reduce using rule 29
	int            reduce using rule 29
	var            reduce using rule 29
	op             reduce using rule 29
	true           reduce using rule 29
	false          reduce using rule 29
	where          reduce using rule 29
	classname      reduce using rule 29
	'('            reduce using rule 29
	')'            reduce using rule 29
	'{'            reduce using rule 29
	'}'            reduce using rule 29
	char           reduce using rule 29


State 34

	Exps -> Exps Exp .                                  (rule 36)

	if             reduce using rule 36
	int            reduce using rule 36
	var            reduce using rule 36
	true           reduce using rule 36
	false          reduce using rule 36
	where          reduce using rule 36
	'('            reduce using rule 36
	')'            reduce using rule 36
	'}'            reduce using rule 36
	char           reduce using rule 36


State 35

	TExp -> Var .                                       (rule 25)

	if             reduce using rule 25
	int            reduce using rule 25
	var            reduce using rule 25
	op             reduce using rule 25
	true           reduce using rule 25
	false          reduce using rule 25
	where          reduce using rule 25
	classname      reduce using rule 25
	'('            reduce using rule 25
	')'            reduce using rule 25
	'{'            reduce using rule 25
	'}'            reduce using rule 25
	char           reduce using rule 25


State 36

	TExp -> Int .                                       (rule 26)

	if             reduce using rule 26
	int            reduce using rule 26
	var            reduce using rule 26
	op             reduce using rule 26
	true           reduce using rule 26
	false          reduce using rule 26
	where          reduce using rule 26
	classname      reduce using rule 26
	'('            reduce using rule 26
	')'            reduce using rule 26
	'{'            reduce using rule 26
	'}'            reduce using rule 26
	char           reduce using rule 26


State 37

	TExp -> Bool .                                      (rule 27)

	if             reduce using rule 27
	int            reduce using rule 27
	var            reduce using rule 27
	op             reduce using rule 27
	true           reduce using rule 27
	false          reduce using rule 27
	where          reduce using rule 27
	classname      reduce using rule 27
	'('            reduce using rule 27
	')'            reduce using rule 27
	'{'            reduce using rule 27
	'}'            reduce using rule 27
	char           reduce using rule 27


State 38

	TExp -> Char .                                      (rule 28)

	if             reduce using rule 28
	int            reduce using rule 28
	var            reduce using rule 28
	op             reduce using rule 28
	true           reduce using rule 28
	false          reduce using rule 28
	where          reduce using rule 28
	classname      reduce using rule 28
	'('            reduce using rule 28
	')'            reduce using rule 28
	'{'            reduce using rule 28
	'}'            reduce using rule 28
	char           reduce using rule 28


State 39

	Exp -> '(' . PExp ')'                               (rule 31)

	if             reduce using rule 1
	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            reduce using rule 1
	char           reduce using rule 1

	Pos            goto state 40
	PExp           goto state 41
	Apply          goto state 42
	Infix          goto state 43

State 40

	Apply -> Pos . Exp Exps                             (rule 34)
	Infix -> Pos . Exp op Exp                           (rule 37)

	if             reduce using rule 1
	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            shift, and enter state 39
	char           reduce using rule 1

	Pos            goto state 30
	If             goto state 32
	TExp           goto state 33
	Exp            goto state 61
	Var            goto state 35
	Int            goto state 36
	Bool           goto state 37
	Char           goto state 38

State 41

	Exp -> '(' PExp . ')'                               (rule 31)

	')'            shift, and enter state 60


State 42

	PExp -> Apply .                                     (rule 32)

	')'            reduce using rule 32


State 43

	PExp -> Infix .                                     (rule 33)

	')'            reduce using rule 33


State 44

	Block -> Pos '{' Exps WhereClause '}' .             (rule 43)

	if             reduce using rule 43
	int            reduce using rule 43
	var            reduce using rule 43
	op             reduce using rule 43
	true           reduce using rule 43
	false          reduce using rule 43
	where          reduce using rule 43
	classname      reduce using rule 43
	'('            reduce using rule 43
	')'            reduce using rule 43
	'{'            reduce using rule 43
	'}'            reduce using rule 43
	char           reduce using rule 43
	%eof           reduce using rule 43


State 45

	If -> Pos if . Exp Block Block                      (rule 24)

	if             reduce using rule 1
	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            shift, and enter state 39
	char           reduce using rule 1

	Pos            goto state 30
	If             goto state 32
	TExp           goto state 33
	Exp            goto state 59
	Var            goto state 35
	Int            goto state 36
	Bool           goto state 37
	Char           goto state 38

State 46

	Int -> Pos int .                                    (rule 39)

	if             reduce using rule 39
	int            reduce using rule 39
	var            reduce using rule 39
	op             reduce using rule 39
	true           reduce using rule 39
	false          reduce using rule 39
	where          reduce using rule 39
	classname      reduce using rule 39
	'('            reduce using rule 39
	')'            reduce using rule 39
	'{'            reduce using rule 39
	'}'            reduce using rule 39
	char           reduce using rule 39


State 47

	Var -> Pos var .                                    (rule 38)

	if             reduce using rule 38
	int            reduce using rule 38
	var            reduce using rule 38
	op             reduce using rule 38
	true           reduce using rule 38
	false          reduce using rule 38
	where          reduce using rule 38
	classname      reduce using rule 38
	'('            reduce using rule 38
	')'            reduce using rule 38
	'{'            reduce using rule 38
	'}'            reduce using rule 38
	char           reduce using rule 38


State 48

	Bool -> Pos true .                                  (rule 40)

	if             reduce using rule 40
	int            reduce using rule 40
	var            reduce using rule 40
	op             reduce using rule 40
	true           reduce using rule 40
	false          reduce using rule 40
	where          reduce using rule 40
	classname      reduce using rule 40
	'('            reduce using rule 40
	')'            reduce using rule 40
	'{'            reduce using rule 40
	'}'            reduce using rule 40
	char           reduce using rule 40


State 49

	Bool -> Pos false .                                 (rule 41)

	if             reduce using rule 41
	int            reduce using rule 41
	var            reduce using rule 41
	op             reduce using rule 41
	true           reduce using rule 41
	false          reduce using rule 41
	where          reduce using rule 41
	classname      reduce using rule 41
	'('            reduce using rule 41
	')'            reduce using rule 41
	'{'            reduce using rule 41
	'}'            reduce using rule 41
	char           reduce using rule 41


State 50

	Char -> Pos char .                                  (rule 42)

	if             reduce using rule 42
	int            reduce using rule 42
	var            reduce using rule 42
	op             reduce using rule 42
	true           reduce using rule 42
	false          reduce using rule 42
	where          reduce using rule 42
	classname      reduce using rule 42
	'('            reduce using rule 42
	')'            reduce using rule 42
	'{'            reduce using rule 42
	'}'            reduce using rule 42
	char           reduce using rule 42


State 51

	FDef -> Pos . FQType def var Vars Block WhereClause    (rule 17)
	Def -> Pos . QType let var Exp                      (rule 19)

	classname      reduce using rule 1
	'('            reduce using rule 1

	Pos            goto state 55
	QType          goto state 56
	FQType         goto state 57
	SQType         goto state 58

State 52

	Def -> FDef .                                       (rule 18)

	classname      reduce using rule 18
	'('            reduce using rule 18
	'}'            reduce using rule 18


State 53

	Defs -> Defs Def .                                  (rule 15)

	classname      reduce using rule 15
	'('            reduce using rule 15
	'}'            reduce using rule 15


State 54

	WhereClause -> where '{' Defs '}' .                 (rule 20)

	classname      reduce using rule 20
	'('            reduce using rule 20
	'}'            reduce using rule 20
	%eof           reduce using rule 20


State 55

	FQType -> Pos . FType '#'                           (rule 4)
	SQType -> Pos . SType '#'                           (rule 5)

	classname      shift, and enter state 14
	'('            shift, and enter state 10

	FType          goto state 9
	SType          goto state 66
	TypeName       goto state 67

State 56

	Def -> Pos QType . let var Exp                      (rule 19)

	let            shift, and enter state 65


State 57

	QType -> FQType .                                   (rule 2)
	FDef -> Pos FQType . def var Vars Block WhereClause    (rule 17)

	def            shift, and enter state 8
	let            reduce using rule 2


State 58

	QType -> SQType .                                   (rule 3)

	let            reduce using rule 3


State 59

	If -> Pos if Exp . Block Block                      (rule 24)

	'{'            reduce using rule 1

	Pos            goto state 21
	Block          goto state 64

State 60

	Exp -> '(' PExp ')' .                               (rule 31)

	if             reduce using rule 31
	int            reduce using rule 31
	var            reduce using rule 31
	op             reduce using rule 31
	true           reduce using rule 31
	false          reduce using rule 31
	where          reduce using rule 31
	classname      reduce using rule 31
	'('            reduce using rule 31
	')'            reduce using rule 31
	'{'            reduce using rule 31
	'}'            reduce using rule 31
	char           reduce using rule 31


State 61

	Apply -> Pos Exp . Exps                             (rule 34)
	Infix -> Pos Exp . op Exp                           (rule 37)

	if             reduce using rule 35
	int            reduce using rule 35
	var            reduce using rule 35
	op             shift, and enter state 63
	true           reduce using rule 35
	false          reduce using rule 35
	'('            reduce using rule 35
	')'            reduce using rule 35
	char           reduce using rule 35

	Exps           goto state 62

State 62

	Apply -> Pos Exp Exps .                             (rule 34)
	Exps -> Exps . Exp                                  (rule 36)

	if             reduce using rule 1
	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            shift, and enter state 39
	')'            reduce using rule 34
	char           reduce using rule 1

	Pos            goto state 30
	If             goto state 32
	TExp           goto state 33
	Exp            goto state 34
	Var            goto state 35
	Int            goto state 36
	Bool           goto state 37
	Char           goto state 38

State 63

	Infix -> Pos Exp op . Exp                           (rule 37)

	if             reduce using rule 1
	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            shift, and enter state 39
	char           reduce using rule 1

	Pos            goto state 30
	If             goto state 32
	TExp           goto state 33
	Exp            goto state 71
	Var            goto state 35
	Int            goto state 36
	Bool           goto state 37
	Char           goto state 38

State 64

	If -> Pos if Exp Block . Block                      (rule 24)

	'{'            reduce using rule 1

	Pos            goto state 21
	Block          goto state 70

State 65

	Def -> Pos QType let . var Exp                      (rule 19)

	var            shift, and enter state 69


State 66

	SQType -> Pos SType . '#'                           (rule 5)

	'#'            shift, and enter state 68


State 67

	SType -> TypeName .                                 (rule 7)

	'#'            reduce using rule 7


State 68

	SQType -> Pos SType '#' .                           (rule 5)

	let            reduce using rule 5


State 69

	Def -> Pos QType let var . Exp                      (rule 19)

	if             reduce using rule 1
	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            shift, and enter state 39
	char           reduce using rule 1

	Pos            goto state 30
	If             goto state 32
	TExp           goto state 33
	Exp            goto state 72
	Var            goto state 35
	Int            goto state 36
	Bool           goto state 37
	Char           goto state 38

State 70

	If -> Pos if Exp Block Block .                      (rule 24)

	if             reduce using rule 24
	int            reduce using rule 24
	var            reduce using rule 24
	op             reduce using rule 24
	true           reduce using rule 24
	false          reduce using rule 24
	where          reduce using rule 24
	classname      reduce using rule 24
	'('            reduce using rule 24
	')'            reduce using rule 24
	'{'            reduce using rule 24
	'}'            reduce using rule 24
	char           reduce using rule 24


State 71

	Infix -> Pos Exp op Exp .                           (rule 37)

	')'            reduce using rule 37


State 72

	Def -> Pos QType let var Exp .                      (rule 19)

	classname      reduce using rule 19
	'('            reduce using rule 19
	'}'            reduce using rule 19


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 44
Number of terminals: 17
Number of non-terminals: 29
Number of states: 73
