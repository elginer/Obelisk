-----------------------------------------------------------------------------
Info file generated by Happy Version 1.18.2 from obelisk.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> Obelisk                            (0)
	Pos ->                                             (1)
	QType -> FQType                                    (2)
	QType -> SQType                                    (3)
	FQType -> Pos FType '#'                            (4)
	SQType -> Pos SType '#'                            (5)
	FType -> '(' ArgTypes ')'                          (6)
	SType -> TypeName                                  (7)
	ArgTypes -> TypeNames                              (8)
	TypeNames -> TypeNames '->' TypeName               (9)
	TypeNames -> TypeName                              (10)
	TypeName -> classname                              (11)
	Obelisk -> FDefs                                   (12)
	FDefs -> FDefs '(' FDef ')'                        (13)
	FDefs ->                                           (14)
	Defs -> Defs '(' Def ')'                           (15)
	Defs ->                                            (16)
	FDef -> Pos FQType def var Vars Block WhereClause   (17)
	Def -> FDef                                        (18)
	Def -> Pos QType let var Exp                       (19)
	WhereClause -> where '(' Defs ')'                  (20)
	WhereClause ->                                     (21)
	Vars ->                                            (22)
	Vars -> Vars var                                   (23)
	If -> Pos if Exp Block Block                       (24)
	TExp -> Var                                        (25)
	TExp -> Int                                        (26)
	TExp -> Bool                                       (27)
	TExp -> Char                                       (28)
	Exp -> TExp                                        (29)
	Exp -> '(' PExp ')'                                (30)
	PExp -> Apply                                      (31)
	PExp -> Infix                                      (32)
	PExp -> If                                         (33)
	Apply -> Pos Exp Exps                              (34)
	Exps ->                                            (35)
	Exps -> Exps Exp                                   (36)
	Infix -> Pos Exp op Exp                            (37)
	Var -> Pos var                                     (38)
	Int -> Pos int                                     (39)
	Bool -> Pos true                                   (40)
	Bool -> Pos false                                  (41)
	Char -> Pos char                                   (42)
	Block -> Pos '(' WhereExps ')'                     (43)
	WhereExps -> WhereExps WhereExp                    (44)
	WhereExps -> WhereExp                              (45)
	WhereExp -> Exp WhereClause                        (46)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	def            { TDef }
	if             { TIf }
	int            { TInt $$ }
	var            { TVar $$ }
	op             { TOp $$ }
	true           { TTrue }
	false          { TFalse }
	where          { TWhere }
	let            { TConstant }
	classname      { TClassName $$ }
	'->'           { TArrow }
	'#'            { TTypeTerm }
	'('            { TParOpen }
	')'            { TParClose }
	char           { TChar $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	Pos             rule  1
	QType           rules 2, 3
	FQType          rule  4
	SQType          rule  5
	FType           rule  6
	SType           rule  7
	ArgTypes        rule  8
	TypeNames       rules 9, 10
	TypeName        rule  11
	Obelisk         rule  12
	FDefs           rules 13, 14
	Defs            rules 15, 16
	FDef            rule  17
	Def             rules 18, 19
	WhereClause     rules 20, 21
	Vars            rules 22, 23
	If              rule  24
	TExp            rules 25, 26, 27, 28
	Exp             rules 29, 30
	PExp            rules 31, 32, 33
	Apply           rule  34
	Exps            rules 35, 36
	Infix           rule  37
	Var             rule  38
	Int             rule  39
	Bool            rules 40, 41
	Char            rule  42
	Block           rule  43
	WhereExps       rules 44, 45
	WhereExp        rule  46

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'('            reduce using rule 14
	%eof           reduce using rule 14

	Obelisk        goto state 2
	FDefs          goto state 3

State 1




State 2

	%start_parse -> Obelisk .                           (rule 0)

	%eof           accept


State 3

	Obelisk -> FDefs .                                  (rule 12)
	FDefs -> FDefs . '(' FDef ')'                       (rule 13)

	'('            shift, and enter state 4
	%eof           reduce using rule 12


State 4

	FDefs -> FDefs '(' . FDef ')'                       (rule 13)

	'('            reduce using rule 1

	Pos            goto state 5
	FDef           goto state 6

State 5

	FDef -> Pos . FQType def var Vars Block WhereClause    (rule 17)

	'('            reduce using rule 1

	Pos            goto state 8
	FQType         goto state 9

State 6

	FDefs -> FDefs '(' FDef . ')'                       (rule 13)

	')'            shift, and enter state 7


State 7

	FDefs -> FDefs '(' FDef ')' .                       (rule 13)

	'('            reduce using rule 13
	%eof           reduce using rule 13


State 8

	FQType -> Pos . FType '#'                           (rule 4)

	'('            shift, and enter state 12

	FType          goto state 11

State 9

	FDef -> Pos FQType . def var Vars Block WhereClause    (rule 17)

	def            shift, and enter state 10


State 10

	FDef -> Pos FQType def . var Vars Block WhereClause    (rule 17)

	var            shift, and enter state 18


State 11

	FQType -> Pos FType . '#'                           (rule 4)

	'#'            shift, and enter state 17


State 12

	FType -> '(' . ArgTypes ')'                         (rule 6)

	classname      shift, and enter state 16

	ArgTypes       goto state 13
	TypeNames      goto state 14
	TypeName       goto state 15

State 13

	FType -> '(' ArgTypes . ')'                         (rule 6)

	')'            shift, and enter state 21


State 14

	ArgTypes -> TypeNames .                             (rule 8)
	TypeNames -> TypeNames . '->' TypeName              (rule 9)

	'->'           shift, and enter state 20
	')'            reduce using rule 8


State 15

	TypeNames -> TypeName .                             (rule 10)

	'->'           reduce using rule 10
	')'            reduce using rule 10


State 16

	TypeName -> classname .                             (rule 11)

	'->'           reduce using rule 11
	'#'            reduce using rule 11
	')'            reduce using rule 11


State 17

	FQType -> Pos FType '#' .                           (rule 4)

	def            reduce using rule 4
	let            reduce using rule 4


State 18

	FDef -> Pos FQType def var . Vars Block WhereClause    (rule 17)

	var            reduce using rule 22
	'('            reduce using rule 22

	Vars           goto state 19

State 19

	FDef -> Pos FQType def var Vars . Block WhereClause    (rule 17)
	Vars -> Vars . var                                  (rule 23)

	var            shift, and enter state 25
	'('            reduce using rule 1

	Pos            goto state 23
	Block          goto state 24

State 20

	TypeNames -> TypeNames '->' . TypeName              (rule 9)

	classname      shift, and enter state 16

	TypeName       goto state 22

State 21

	FType -> '(' ArgTypes ')' .                         (rule 6)

	'#'            reduce using rule 6


State 22

	TypeNames -> TypeNames '->' TypeName .              (rule 9)

	'->'           reduce using rule 9
	')'            reduce using rule 9


State 23

	Block -> Pos . '(' WhereExps ')'                    (rule 43)

	'('            shift, and enter state 28


State 24

	FDef -> Pos FQType def var Vars Block . WhereClause    (rule 17)

	where          shift, and enter state 27
	')'            reduce using rule 21

	WhereClause    goto state 26

State 25

	Vars -> Vars var .                                  (rule 23)

	var            reduce using rule 23
	'('            reduce using rule 23


State 26

	FDef -> Pos FQType def var Vars Block WhereClause .    (rule 17)

	')'            reduce using rule 17


State 27

	WhereClause -> where . '(' Defs ')'                 (rule 20)

	'('            shift, and enter state 39


State 28

	Block -> Pos '(' . WhereExps ')'                    (rule 43)

	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            shift, and enter state 38
	char           reduce using rule 1

	Pos            goto state 29
	TExp           goto state 30
	Exp            goto state 31
	Var            goto state 32
	Int            goto state 33
	Bool           goto state 34
	Char           goto state 35
	WhereExps      goto state 36
	WhereExp       goto state 37

State 29

	Var -> Pos . var                                    (rule 38)
	Int -> Pos . int                                    (rule 39)
	Bool -> Pos . true                                  (rule 40)
	Bool -> Pos . false                                 (rule 41)
	Char -> Pos . char                                  (rule 42)

	int            shift, and enter state 49
	var            shift, and enter state 50
	true           shift, and enter state 51
	false          shift, and enter state 52
	char           shift, and enter state 53


State 30

	Exp -> TExp .                                       (rule 29)

	int            reduce using rule 29
	var            reduce using rule 29
	op             reduce using rule 29
	true           reduce using rule 29
	false          reduce using rule 29
	where          reduce using rule 29
	'('            reduce using rule 29
	')'            reduce using rule 29
	char           reduce using rule 29


State 31

	WhereExp -> Exp . WhereClause                       (rule 46)

	int            reduce using rule 21
	var            reduce using rule 21
	true           reduce using rule 21
	false          reduce using rule 21
	where          shift, and enter state 27
	'('            reduce using rule 21
	')'            reduce using rule 21
	char           reduce using rule 21

	WhereClause    goto state 48

State 32

	TExp -> Var .                                       (rule 25)

	int            reduce using rule 25
	var            reduce using rule 25
	op             reduce using rule 25
	true           reduce using rule 25
	false          reduce using rule 25
	where          reduce using rule 25
	'('            reduce using rule 25
	')'            reduce using rule 25
	char           reduce using rule 25


State 33

	TExp -> Int .                                       (rule 26)

	int            reduce using rule 26
	var            reduce using rule 26
	op             reduce using rule 26
	true           reduce using rule 26
	false          reduce using rule 26
	where          reduce using rule 26
	'('            reduce using rule 26
	')'            reduce using rule 26
	char           reduce using rule 26


State 34

	TExp -> Bool .                                      (rule 27)

	int            reduce using rule 27
	var            reduce using rule 27
	op             reduce using rule 27
	true           reduce using rule 27
	false          reduce using rule 27
	where          reduce using rule 27
	'('            reduce using rule 27
	')'            reduce using rule 27
	char           reduce using rule 27


State 35

	TExp -> Char .                                      (rule 28)

	int            reduce using rule 28
	var            reduce using rule 28
	op             reduce using rule 28
	true           reduce using rule 28
	false          reduce using rule 28
	where          reduce using rule 28
	'('            reduce using rule 28
	')'            reduce using rule 28
	char           reduce using rule 28


State 36

	Block -> Pos '(' WhereExps . ')'                    (rule 43)
	WhereExps -> WhereExps . WhereExp                   (rule 44)

	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            shift, and enter state 38
	')'            shift, and enter state 47
	char           reduce using rule 1

	Pos            goto state 29
	TExp           goto state 30
	Exp            goto state 31
	Var            goto state 32
	Int            goto state 33
	Bool           goto state 34
	Char           goto state 35
	WhereExp       goto state 46

State 37

	WhereExps -> WhereExp .                             (rule 45)

	int            reduce using rule 45
	var            reduce using rule 45
	true           reduce using rule 45
	false          reduce using rule 45
	'('            reduce using rule 45
	')'            reduce using rule 45
	char           reduce using rule 45


State 38

	Exp -> '(' . PExp ')'                               (rule 30)

	if             reduce using rule 1
	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            reduce using rule 1
	char           reduce using rule 1

	Pos            goto state 41
	If             goto state 42
	PExp           goto state 43
	Apply          goto state 44
	Infix          goto state 45

State 39

	WhereClause -> where '(' . Defs ')'                 (rule 20)

	'('            reduce using rule 16
	')'            reduce using rule 16

	Defs           goto state 40

State 40

	Defs -> Defs . '(' Def ')'                          (rule 15)
	WhereClause -> where '(' Defs . ')'                 (rule 20)

	'('            shift, and enter state 57
	')'            shift, and enter state 58


State 41

	If -> Pos . if Exp Block Block                      (rule 24)
	Apply -> Pos . Exp Exps                             (rule 34)
	Infix -> Pos . Exp op Exp                           (rule 37)

	if             shift, and enter state 56
	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            shift, and enter state 38
	char           reduce using rule 1

	Pos            goto state 29
	TExp           goto state 30
	Exp            goto state 55
	Var            goto state 32
	Int            goto state 33
	Bool           goto state 34
	Char           goto state 35

State 42

	PExp -> If .                                        (rule 33)

	')'            reduce using rule 33


State 43

	Exp -> '(' PExp . ')'                               (rule 30)

	')'            shift, and enter state 54


State 44

	PExp -> Apply .                                     (rule 31)

	')'            reduce using rule 31


State 45

	PExp -> Infix .                                     (rule 32)

	')'            reduce using rule 32


State 46

	WhereExps -> WhereExps WhereExp .                   (rule 44)

	int            reduce using rule 44
	var            reduce using rule 44
	true           reduce using rule 44
	false          reduce using rule 44
	'('            reduce using rule 44
	')'            reduce using rule 44
	char           reduce using rule 44


State 47

	Block -> Pos '(' WhereExps ')' .                    (rule 43)

	where          reduce using rule 43
	'('            reduce using rule 43
	')'            reduce using rule 43


State 48

	WhereExp -> Exp WhereClause .                       (rule 46)

	int            reduce using rule 46
	var            reduce using rule 46
	true           reduce using rule 46
	false          reduce using rule 46
	'('            reduce using rule 46
	')'            reduce using rule 46
	char           reduce using rule 46


State 49

	Int -> Pos int .                                    (rule 39)

	int            reduce using rule 39
	var            reduce using rule 39
	op             reduce using rule 39
	true           reduce using rule 39
	false          reduce using rule 39
	where          reduce using rule 39
	'('            reduce using rule 39
	')'            reduce using rule 39
	char           reduce using rule 39


State 50

	Var -> Pos var .                                    (rule 38)

	int            reduce using rule 38
	var            reduce using rule 38
	op             reduce using rule 38
	true           reduce using rule 38
	false          reduce using rule 38
	where          reduce using rule 38
	'('            reduce using rule 38
	')'            reduce using rule 38
	char           reduce using rule 38


State 51

	Bool -> Pos true .                                  (rule 40)

	int            reduce using rule 40
	var            reduce using rule 40
	op             reduce using rule 40
	true           reduce using rule 40
	false          reduce using rule 40
	where          reduce using rule 40
	'('            reduce using rule 40
	')'            reduce using rule 40
	char           reduce using rule 40


State 52

	Bool -> Pos false .                                 (rule 41)

	int            reduce using rule 41
	var            reduce using rule 41
	op             reduce using rule 41
	true           reduce using rule 41
	false          reduce using rule 41
	where          reduce using rule 41
	'('            reduce using rule 41
	')'            reduce using rule 41
	char           reduce using rule 41


State 53

	Char -> Pos char .                                  (rule 42)

	int            reduce using rule 42
	var            reduce using rule 42
	op             reduce using rule 42
	true           reduce using rule 42
	false          reduce using rule 42
	where          reduce using rule 42
	'('            reduce using rule 42
	')'            reduce using rule 42
	char           reduce using rule 42


State 54

	Exp -> '(' PExp ')' .                               (rule 30)

	int            reduce using rule 30
	var            reduce using rule 30
	op             reduce using rule 30
	true           reduce using rule 30
	false          reduce using rule 30
	where          reduce using rule 30
	'('            reduce using rule 30
	')'            reduce using rule 30
	char           reduce using rule 30


State 55

	Apply -> Pos Exp . Exps                             (rule 34)
	Infix -> Pos Exp . op Exp                           (rule 37)

	int            reduce using rule 35
	var            reduce using rule 35
	op             shift, and enter state 64
	true           reduce using rule 35
	false          reduce using rule 35
	'('            reduce using rule 35
	')'            reduce using rule 35
	char           reduce using rule 35

	Exps           goto state 63

State 56

	If -> Pos if . Exp Block Block                      (rule 24)

	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            shift, and enter state 38
	char           reduce using rule 1

	Pos            goto state 29
	TExp           goto state 30
	Exp            goto state 62
	Var            goto state 32
	Int            goto state 33
	Bool           goto state 34
	Char           goto state 35

State 57

	Defs -> Defs '(' . Def ')'                          (rule 15)

	classname      reduce using rule 1
	'('            reduce using rule 1

	Pos            goto state 59
	FDef           goto state 60
	Def            goto state 61

State 58

	WhereClause -> where '(' Defs ')' .                 (rule 20)

	int            reduce using rule 20
	var            reduce using rule 20
	true           reduce using rule 20
	false          reduce using rule 20
	'('            reduce using rule 20
	')'            reduce using rule 20
	char           reduce using rule 20


State 59

	FDef -> Pos . FQType def var Vars Block WhereClause    (rule 17)
	Def -> Pos . QType let var Exp                      (rule 19)

	classname      reduce using rule 1
	'('            reduce using rule 1

	Pos            goto state 69
	QType          goto state 70
	FQType         goto state 71
	SQType         goto state 72

State 60

	Def -> FDef .                                       (rule 18)

	')'            reduce using rule 18


State 61

	Defs -> Defs '(' Def . ')'                          (rule 15)

	')'            shift, and enter state 68


State 62

	If -> Pos if Exp . Block Block                      (rule 24)

	'('            reduce using rule 1

	Pos            goto state 23
	Block          goto state 67

State 63

	Apply -> Pos Exp Exps .                             (rule 34)
	Exps -> Exps . Exp                                  (rule 36)

	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            shift, and enter state 38
	')'            reduce using rule 34
	char           reduce using rule 1

	Pos            goto state 29
	TExp           goto state 30
	Exp            goto state 66
	Var            goto state 32
	Int            goto state 33
	Bool           goto state 34
	Char           goto state 35

State 64

	Infix -> Pos Exp op . Exp                           (rule 37)

	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            shift, and enter state 38
	char           reduce using rule 1

	Pos            goto state 29
	TExp           goto state 30
	Exp            goto state 65
	Var            goto state 32
	Int            goto state 33
	Bool           goto state 34
	Char           goto state 35

State 65

	Infix -> Pos Exp op Exp .                           (rule 37)

	')'            reduce using rule 37


State 66

	Exps -> Exps Exp .                                  (rule 36)

	int            reduce using rule 36
	var            reduce using rule 36
	true           reduce using rule 36
	false          reduce using rule 36
	'('            reduce using rule 36
	')'            reduce using rule 36
	char           reduce using rule 36


State 67

	If -> Pos if Exp Block . Block                      (rule 24)

	'('            reduce using rule 1

	Pos            goto state 23
	Block          goto state 76

State 68

	Defs -> Defs '(' Def ')' .                          (rule 15)

	'('            reduce using rule 15
	')'            reduce using rule 15


State 69

	FQType -> Pos . FType '#'                           (rule 4)
	SQType -> Pos . SType '#'                           (rule 5)

	classname      shift, and enter state 16
	'('            shift, and enter state 12

	FType          goto state 11
	SType          goto state 74
	TypeName       goto state 75

State 70

	Def -> Pos QType . let var Exp                      (rule 19)

	let            shift, and enter state 73


State 71

	QType -> FQType .                                   (rule 2)
	FDef -> Pos FQType . def var Vars Block WhereClause    (rule 17)

	def            shift, and enter state 10
	let            reduce using rule 2


State 72

	QType -> SQType .                                   (rule 3)

	let            reduce using rule 3


State 73

	Def -> Pos QType let . var Exp                      (rule 19)

	var            shift, and enter state 78


State 74

	SQType -> Pos SType . '#'                           (rule 5)

	'#'            shift, and enter state 77


State 75

	SType -> TypeName .                                 (rule 7)

	'#'            reduce using rule 7


State 76

	If -> Pos if Exp Block Block .                      (rule 24)

	')'            reduce using rule 24


State 77

	SQType -> Pos SType '#' .                           (rule 5)

	let            reduce using rule 5


State 78

	Def -> Pos QType let var . Exp                      (rule 19)

	int            reduce using rule 1
	var            reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	'('            shift, and enter state 38
	char           reduce using rule 1

	Pos            goto state 29
	TExp           goto state 30
	Exp            goto state 79
	Var            goto state 32
	Int            goto state 33
	Bool           goto state 34
	Char           goto state 35

State 79

	Def -> Pos QType let var Exp .                      (rule 19)

	')'            reduce using rule 19


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 47
Number of terminals: 15
Number of non-terminals: 31
Number of states: 80
