{-

Copyright 2010 John Morrice

This source file is part of The Obelisk Programming Language and is distributed under the terms of the GNU General Public License

This file is part of The Obelisk Programming Language.

    The Obelisk Programming Language is free software: you can 
    redistribute it and/or modify it under the terms of the GNU 
    General Public License as published by the Free Software Foundation, 
    either version 3 of the License, or any later version.

    The Obelisk Programming Language is distributed in the hope that it 
    will be useful, but WITHOUT ANY WARRANTY; without even the implied 
    warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
    See the GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with The Obelisk Programming Language.  
    If not, see <http://www.gnu.org/licenses/>

-}

{-# OPTIONS  #-}


-- parser (data) produced by Happy (GLR) Version 1.18.4

module Data where

-- | Parser for obelisk.  Generated by happy.  See happy/obelisk.y
module Language.Obelisk.Parser where

import Prelude hiding (lex)

import Language.Obelisk.Parser.Monad

import Language.Obelisk.Lexer
import Language.Obelisk.Lexer.Token

import Language.Obelisk.AST.Simple

parse :: Parse

terror :: Token -> OParser a
terror = fail . ("Caused by token: " ++) . show


{-# LINE 1 "templates/GLR_Base.lhs" #-}
{-# LINE 1 "/tmp/ghc6289_0/ghc6289_0.lpp" #-}
{-# LINE 1 "<built-in>" #-}
{-# LINE 1 "<command-line>" #-}
{-# LINE 1 "/tmp/ghc6289_0/ghc6289_0.lpp" #-}
{-# LINE 1 "templates/GLR_Base.lhs" #-}









 type ForestId  = (Int,Int,GSymbol)





 data GLRAction = Shift Int [Reduction]
                | Reduce [Reduction]
                | Accept
                | Error 






 type Reduction = (GSymbol,Int, [ForestId] -> Branch)





 data Branch
  = Branch {b_sem :: GSem, b_nodes :: [ForestId]}
    deriving Show

 instance Eq Branch where
        b1 == b2 = b_nodes b1 == b_nodes b2













 class TreeDecode a where
        decode_b :: (ForestId -> [Branch]) -> Branch -> [Decode_Result a]

 decode :: TreeDecode a => (ForestId -> [Branch]) -> ForestId -> [Decode_Result a]
 decode f i@(_,_,HappyTok t) 
   = decode_b f (Branch (SemTok t) [])
 decode f i
   = [ d | b <- f i, d <- decode_b f b ]








 --cross_fn :: [a -> b] -> [a] -> [b]
 --actual type will depend on monad in use. 
 --happy_ap defined by parser generator
 cross_fn fs as = [ f `happy_ap` a | f <- fs, a <- as]








 class LabelDecode a where
        unpack :: GSem -> a








{-# LINE 118 "Data.hs"#-}



{-# LINE 122 "Data.hs"#-}

data GSymbol = HappyEOF | HappyTok {-!Int-} (Token) | G_Pos 
 | G_Obelisk 
 | G_Stmts 
 | G_Stmt 
 | G_PStmt 
 | G_Def 
 | G_Vars 
 | G_If 
 | G_LocalSet 
 | G_PStmtexp 
 | G_Stmtexp 
 | G_TExp 
 | G_Exp 
 | G_PExp 
 | G_Apply 
 | G_Exps 
 | G_Infix 
 | G_Var 
 | G_Int 
 | G_Bool 
 | G_Returner 
   deriving (Show,Eq,Ord)

data GSem
 = NoSem
 | SemTok (Token) | Sem_0 (CodeFragment) 
 | Sem_1 (SimpleObelisk) 
 | Sem_2 ([SimpleStmt]) 
 | Sem_3 ([SimpleStmt]) 
 | Sem_4 (SimpleStmt) 
 | Sem_5 (SimpleStmt) 
 | Sem_6 (SimpleStmt) 
 | Sem_7 (SimpleStmt) 
 | Sem_8 ([String]) 
 | Sem_9 ([String]) 
 | Sem_10 (SimpleStmt) 
 | Sem_11 (SimpleStmt) 
 | Sem_12 (SimpleExp) 
 | Sem_13 (SimpleExp) 
 | Sem_14 (SimpleExp) 
 | Sem_15 ([SimpleExp]) 
 | Sem_16 ([SimpleExp]) 
 | Sem_17 (SimpleExp) 
 | Sem_18 (SimpleExp) 
 | Sem_19 (SimpleReturner) 
   deriving (Show)


semfn_0_0 ns@(happy_rest) =  Branch (Sem_0 (% get_pos)) ns
semfn_1_0 ns@(happy_var_1:happy_rest) =  Branch (Sem_1 (Obelisk $ reverse happy_var_1)) ns
semfn_2_0 ns@(happy_rest) =  Branch (Sem_2 ([])) ns
semfn_3_0 ns@(happy_var_1:happy_var_2:happy_rest) =  Branch (Sem_3 (happy_var_2 : happy_var_1)) ns
semfn_4_0 ns@(happy_var_1:happy_rest) =  Branch (Sem_4 (happy_var_1)) ns
semfn_5_0 ns@(happy_var_1:happy_var_2:happy_rest) =  Branch (Sem_5 (happy_var_2)) ns
semfn_6_0 ns@(happy_var_1:happy_var_2:(_,_,HappyTok ((TVar happy_var_3))):happy_var_4:happy_rest) =  Branch (Sem_6 (Def happy_var_1 happy_var_3 [] happy_var_4)) ns
semfn_6_1 ns@(happy_var_1:happy_var_2:(_,_,HappyTok ((TVar happy_var_3))):happy_var_4:happy_rest) =  Branch (Sem_6 (SetLocal happy_var_1 happy_var_3 happy_var_4)) ns
semfn_7_0 ns@(happy_var_1:happy_var_2:(_,_,HappyTok ((TVar happy_var_3))):happy_var_4:happy_var_5:happy_var_6:happy_var_7:happy_rest) =  Branch (Sem_7 (Def happy_var_1 happy_var_3 happy_var_5 happy_var_7)) ns
semfn_8_0 ns@((_,_,HappyTok ((TVar happy_var_1))):happy_rest) =  Branch (Sem_8 ([happy_var_1])) ns
semfn_9_0 ns@(happy_var_1:(_,_,HappyTok ((TVar happy_var_2))):happy_rest) =  Branch (Sem_9 (happy_var_2 : happy_var_1)) ns
semfn_10_0 ns@(happy_var_1:happy_var_2:happy_var_3:happy_var_4:happy_var_5:happy_rest) =  Branch (Sem_10 (If happy_var_1 happy_var_3 happy_var_4 happy_var_5)) ns
semfn_11_0 ns@(happy_var_1:happy_var_2:happy_rest) =  Branch (Sem_11 (StmtExp happy_var_1 happy_var_2)) ns
semfn_12_0 ns@(happy_var_1:happy_rest) =  Branch (Sem_12 (happy_var_1)) ns
semfn_12_1 ns@(happy_var_1:happy_rest) =  Branch (Sem_12 (OBool happy_var_1 True)) ns
semfn_12_2 ns@(happy_var_1:happy_rest) =  Branch (Sem_12 (OBool happy_var_1 False)) ns
semfn_13_0 ns@(happy_var_1:happy_var_2:happy_rest) =  Branch (Sem_13 (happy_var_2)) ns
semfn_14_0 ns@(happy_var_1:happy_var_2:happy_var_3:happy_rest) =  Branch (Sem_14 (Apply happy_var_1 happy_var_2 happy_var_3)) ns
semfn_15_0 ns@(happy_rest) =  Branch (Sem_15 ([])) ns
semfn_16_0 ns@(happy_var_1:happy_var_2:happy_rest) =  Branch (Sem_16 (happy_var_2 : happy_var_1)) ns
semfn_17_0 ns@(happy_var_1:happy_var_2:(_,_,HappyTok ((TOp happy_var_3))):happy_var_4:happy_rest) =  Branch (Sem_17 (Infix happy_var_1 happy_var_2 happy_var_3 happy_var_4)) ns
semfn_18_0 ns@(happy_var_1:(_,_,HappyTok ((TVar happy_var_2))):happy_rest) =  Branch (Sem_18 (OVar happy_var_1 happy_var_2)) ns
semfn_18_1 ns@(happy_var_1:(_,_,HappyTok ((TInt happy_var_2))):happy_rest) =  Branch (Sem_18 (OInt happy_var_1 happy_var_2)) ns
semfn_19_0 ns@(happy_var_1:happy_var_2:happy_var_3:happy_rest) =  Branch (Sem_19 (Returner happy_var_1 happy_var_3)) ns


happy_join x = (>>=) x id
happy_ap f a = (>>=) f (\f -> (>>=) a (\a -> return(f a)))
type Decode_Result a = (OParser) a
happy_return = return :: a -> Decode_Result a
instance LabelDecode (CodeFragment) where 
	unpack (Sem_0 s) = s
instance LabelDecode (SimpleObelisk) where 
	unpack (Sem_1 s) = s
instance LabelDecode ([SimpleStmt]) where 
	unpack (Sem_2 s) = s
	unpack (Sem_3 s) = s
instance LabelDecode (SimpleStmt) where 
	unpack (Sem_4 s) = s
	unpack (Sem_5 s) = s
	unpack (Sem_6 s) = s
	unpack (Sem_7 s) = s
	unpack (Sem_10 s) = s
	unpack (Sem_11 s) = s
instance LabelDecode ([String]) where 
	unpack (Sem_8 s) = s
	unpack (Sem_9 s) = s
instance LabelDecode (SimpleExp) where 
	unpack (Sem_12 s) = s
	unpack (Sem_13 s) = s
	unpack (Sem_14 s) = s
	unpack (Sem_17 s) = s
	unpack (Sem_18 s) = s
instance LabelDecode ([SimpleExp]) where 
	unpack (Sem_15 s) = s
	unpack (Sem_16 s) = s
instance LabelDecode (SimpleReturner) where 
	unpack (Sem_19 s) = s


type UserDefTok = Token
instance TreeDecode (Token) where
	decode_b f (Branch (SemTok t) []) = [happy_return t]
instance LabelDecode (Token) where
	unpack (SemTok t) = t


action 0 ( HappyTok (TInt _) ) = Reduce [red_3]
action 0 ( HappyTok (TVar _) ) = Reduce [red_3]
action 0 ( HappyTok (TTrue) ) = Reduce [red_3]
action 0 ( HappyTok (TFalse) ) = Reduce [red_3]
action 0 ( HappyTok (TParOpen) ) = Reduce [red_3]
action 0 ( HappyEOF ) = Reduce [red_3]
action 2 ( HappyEOF ) = Accept
action 3 ( HappyTok (TInt _) ) = Reduce [red_1]
action 3 ( HappyTok (TVar _) ) = Reduce [red_1]
action 3 ( HappyTok (TTrue) ) = Reduce [red_1]
action 3 ( HappyTok (TFalse) ) = Reduce [red_1]
action 3 ( HappyTok (TParOpen) ) = Shift 7 []
action 3 ( HappyEOF ) = Reduce [red_2]
action 4 ( HappyTok (TInt _) ) = Reduce [red_1]
action 4 ( HappyTok (TVar _) ) = Reduce [red_1]
action 4 ( HappyTok (TTrue) ) = Reduce [red_1]
action 4 ( HappyTok (TFalse) ) = Reduce [red_1]
action 5 ( HappyTok (TInt _) ) = Reduce [red_4]
action 5 ( HappyTok (TVar _) ) = Reduce [red_4]
action 5 ( HappyTok (TTrue) ) = Reduce [red_4]
action 5 ( HappyTok (TFalse) ) = Reduce [red_4]
action 5 ( HappyTok (TParOpen) ) = Reduce [red_4]
action 5 ( HappyTok (TParClose) ) = Reduce [red_4]
action 5 ( HappyEOF ) = Reduce [red_4]
action 6 ( HappyTok (TInt _) ) = Reduce [red_5]
action 6 ( HappyTok (TVar _) ) = Reduce [red_5]
action 6 ( HappyTok (TTrue) ) = Reduce [red_5]
action 6 ( HappyTok (TFalse) ) = Reduce [red_5]
action 6 ( HappyTok (TParOpen) ) = Reduce [red_5]
action 6 ( HappyTok (TParClose) ) = Reduce [red_5]
action 6 ( HappyEOF ) = Reduce [red_5]
action 7 ( HappyTok (TDef) ) = Reduce [red_1]
action 7 ( HappyTok (TInt _) ) = Reduce [red_1]
action 7 ( HappyTok (TVar _) ) = Reduce [red_1]
action 7 ( HappyTok (TTrue) ) = Reduce [red_1]
action 7 ( HappyTok (TFalse) ) = Reduce [red_1]
action 7 ( HappyTok (LocalSetter) ) = Reduce [red_1]
action 7 ( HappyTok (TParOpen) ) = Reduce [red_1]
action 8 ( HappyTok (TDef) ) = Shift 27 []
action 8 ( HappyTok (TInt _) ) = Reduce [red_1]
action 8 ( HappyTok (TVar _) ) = Reduce [red_1]
action 8 ( HappyTok (TTrue) ) = Reduce [red_1]
action 8 ( HappyTok (TFalse) ) = Reduce [red_1]
action 8 ( HappyTok (LocalSetter) ) = Shift 28 []
action 8 ( HappyTok (TParOpen) ) = Reduce [red_1]
action 9 ( HappyTok (TParClose) ) = Shift 22 []
action 10 ( HappyTok (TParClose) ) = Reduce [red_7]
action 11 ( HappyTok (TParClose) ) = Reduce [red_8]
action 12 ( HappyTok (TParClose) ) = Reduce [red_9]
action 13 ( HappyTok (TInt _) ) = Shift 18 []
action 13 ( HappyTok (TVar _) ) = Shift 19 []
action 13 ( HappyTok (TTrue) ) = Shift 20 []
action 13 ( HappyTok (TFalse) ) = Shift 21 []
action 14 ( HappyTok (TInt _) ) = Reduce [red_17]
action 14 ( HappyTok (TVar _) ) = Reduce [red_17]
action 14 ( HappyTok (TTrue) ) = Reduce [red_17]
action 14 ( HappyTok (TFalse) ) = Reduce [red_17]
action 14 ( HappyTok (TParOpen) ) = Reduce [red_17]
action 14 ( HappyTok (TParClose) ) = Reduce [red_17]
action 14 ( HappyEOF ) = Reduce [red_17]
action 15 ( HappyTok (TInt _) ) = Reduce [red_18]
action 15 ( HappyTok (TVar _) ) = Reduce [red_18]
action 15 ( HappyTok (TOp _) ) = Reduce [red_18]
action 15 ( HappyTok (TTrue) ) = Reduce [red_18]
action 15 ( HappyTok (TFalse) ) = Reduce [red_18]
action 15 ( HappyTok (TParOpen) ) = Reduce [red_18]
action 15 ( HappyTok (TParClose) ) = Reduce [red_18]
action 15 ( HappyEOF ) = Reduce [red_18]
action 16 ( HappyTok (TInt _) ) = Reduce [red_19]
action 16 ( HappyTok (TVar _) ) = Reduce [red_19]
action 16 ( HappyTok (TOp _) ) = Reduce [red_19]
action 16 ( HappyTok (TTrue) ) = Reduce [red_19]
action 16 ( HappyTok (TFalse) ) = Reduce [red_19]
action 16 ( HappyTok (TParOpen) ) = Reduce [red_19]
action 16 ( HappyTok (TParClose) ) = Reduce [red_19]
action 16 ( HappyEOF ) = Reduce [red_19]
action 17 ( HappyTok (TInt _) ) = Reduce [red_20]
action 17 ( HappyTok (TVar _) ) = Reduce [red_20]
action 17 ( HappyTok (TOp _) ) = Reduce [red_20]
action 17 ( HappyTok (TTrue) ) = Reduce [red_20]
action 17 ( HappyTok (TFalse) ) = Reduce [red_20]
action 17 ( HappyTok (TParOpen) ) = Reduce [red_20]
action 17 ( HappyTok (TParClose) ) = Reduce [red_20]
action 17 ( HappyEOF ) = Reduce [red_20]
action 18 ( HappyTok (TInt _) ) = Reduce [red_30]
action 18 ( HappyTok (TVar _) ) = Reduce [red_30]
action 18 ( HappyTok (TOp _) ) = Reduce [red_30]
action 18 ( HappyTok (TTrue) ) = Reduce [red_30]
action 18 ( HappyTok (TFalse) ) = Reduce [red_30]
action 18 ( HappyTok (TParOpen) ) = Reduce [red_30]
action 18 ( HappyTok (TParClose) ) = Reduce [red_30]
action 18 ( HappyEOF ) = Reduce [red_30]
action 19 ( HappyTok (TInt _) ) = Reduce [red_29]
action 19 ( HappyTok (TVar _) ) = Reduce [red_29]
action 19 ( HappyTok (TOp _) ) = Reduce [red_29]
action 19 ( HappyTok (TTrue) ) = Reduce [red_29]
action 19 ( HappyTok (TFalse) ) = Reduce [red_29]
action 19 ( HappyTok (TParOpen) ) = Reduce [red_29]
action 19 ( HappyTok (TParClose) ) = Reduce [red_29]
action 19 ( HappyEOF ) = Reduce [red_29]
action 20 ( HappyTok (TInt _) ) = Reduce [red_31]
action 20 ( HappyTok (TVar _) ) = Reduce [red_31]
action 20 ( HappyTok (TOp _) ) = Reduce [red_31]
action 20 ( HappyTok (TTrue) ) = Reduce [red_31]
action 20 ( HappyTok (TFalse) ) = Reduce [red_31]
action 20 ( HappyTok (TParOpen) ) = Reduce [red_31]
action 20 ( HappyTok (TParClose) ) = Reduce [red_31]
action 20 ( HappyEOF ) = Reduce [red_31]
action 21 ( HappyTok (TInt _) ) = Reduce [red_32]
action 21 ( HappyTok (TVar _) ) = Reduce [red_32]
action 21 ( HappyTok (TOp _) ) = Reduce [red_32]
action 21 ( HappyTok (TTrue) ) = Reduce [red_32]
action 21 ( HappyTok (TFalse) ) = Reduce [red_32]
action 21 ( HappyTok (TParOpen) ) = Reduce [red_32]
action 21 ( HappyTok (TParClose) ) = Reduce [red_32]
action 21 ( HappyEOF ) = Reduce [red_32]
action 22 ( HappyTok (TInt _) ) = Reduce [red_6]
action 22 ( HappyTok (TVar _) ) = Reduce [red_6]
action 22 ( HappyTok (TTrue) ) = Reduce [red_6]
action 22 ( HappyTok (TFalse) ) = Reduce [red_6]
action 22 ( HappyTok (TParOpen) ) = Reduce [red_6]
action 22 ( HappyTok (TParClose) ) = Reduce [red_6]
action 22 ( HappyEOF ) = Reduce [red_6]
action 23 ( HappyTok (TInt _) ) = Reduce [red_1]
action 23 ( HappyTok (TVar _) ) = Reduce [red_1]
action 23 ( HappyTok (TTrue) ) = Reduce [red_1]
action 23 ( HappyTok (TFalse) ) = Reduce [red_1]
action 23 ( HappyTok (TParOpen) ) = Shift 33 []
action 24 ( HappyTok (TParClose) ) = Reduce [red_16]
action 25 ( HappyTok (TParClose) ) = Reduce [red_23]
action 26 ( HappyTok (TParClose) ) = Reduce [red_24]
action 27 ( HappyTok (TVar _) ) = Shift 30 []
action 28 ( HappyTok (TVar _) ) = Shift 29 []
action 29 ( HappyTok (TInt _) ) = Reduce [red_1]
action 29 ( HappyTok (TVar _) ) = Reduce [red_1]
action 29 ( HappyTok (TTrue) ) = Reduce [red_1]
action 29 ( HappyTok (TFalse) ) = Reduce [red_1]
action 29 ( HappyTok (TParOpen) ) = Shift 33 []
action 30 ( HappyTok (TParOpen) ) = Shift 39 [red_1]
action 31 ( HappyTok (TInt _) ) = Reduce [red_21]
action 31 ( HappyTok (TVar _) ) = Reduce [red_21]
action 31 ( HappyTok (TOp _) ) = Reduce [red_21]
action 31 ( HappyTok (TTrue) ) = Reduce [red_21]
action 31 ( HappyTok (TFalse) ) = Reduce [red_21]
action 31 ( HappyTok (TParOpen) ) = Reduce [red_21]
action 31 ( HappyTok (TParClose) ) = Reduce [red_21]
action 32 ( HappyTok (TInt _) ) = Reduce [red_26]
action 32 ( HappyTok (TVar _) ) = Reduce [red_26]
action 32 ( HappyTok (TOp _) ) = Shift 36 []
action 32 ( HappyTok (TTrue) ) = Reduce [red_26]
action 32 ( HappyTok (TFalse) ) = Reduce [red_26]
action 32 ( HappyTok (TParOpen) ) = Reduce [red_26]
action 32 ( HappyTok (TParClose) ) = Reduce [red_26]
action 33 ( HappyTok (TInt _) ) = Reduce [red_1]
action 33 ( HappyTok (TVar _) ) = Reduce [red_1]
action 33 ( HappyTok (TTrue) ) = Reduce [red_1]
action 33 ( HappyTok (TFalse) ) = Reduce [red_1]
action 33 ( HappyTok (TParOpen) ) = Reduce [red_1]
action 34 ( HappyTok (TParClose) ) = Shift 46 []
action 35 ( HappyTok (TInt _) ) = Reduce [red_1]
action 35 ( HappyTok (TVar _) ) = Reduce [red_1]
action 35 ( HappyTok (TTrue) ) = Reduce [red_1]
action 35 ( HappyTok (TFalse) ) = Reduce [red_1]
action 35 ( HappyTok (TParOpen) ) = Shift 33 []
action 35 ( HappyTok (TParClose) ) = Reduce [red_25]
action 36 ( HappyTok (TInt _) ) = Reduce [red_1]
action 36 ( HappyTok (TVar _) ) = Reduce [red_1]
action 36 ( HappyTok (TTrue) ) = Reduce [red_1]
action 36 ( HappyTok (TFalse) ) = Reduce [red_1]
action 36 ( HappyTok (TParOpen) ) = Shift 33 []
action 37 ( HappyTok (TParOpen) ) = Shift 43 []
action 38 ( HappyTok (TParClose) ) = Reduce [red_10]
action 39 ( HappyTok (TVar _) ) = Shift 42 []
action 40 ( HappyTok (TParClose) ) = Reduce [red_15]
action 41 ( HappyTok (TVar _) ) = Shift 48 []
action 41 ( HappyTok (TParClose) ) = Shift 49 []
action 42 ( HappyTok (TVar _) ) = Reduce [red_12]
action 42 ( HappyTok (TParClose) ) = Reduce [red_12]
action 43 ( HappyTok (TInt _) ) = Reduce [red_3]
action 43 ( HappyTok (TVar _) ) = Reduce [red_3]
action 43 ( HappyTok (TTrue) ) = Reduce [red_3]
action 43 ( HappyTok (TFalse) ) = Reduce [red_3]
action 43 ( HappyTok (TParOpen) ) = Reduce [red_3]
action 43 ( HappyTok (TParClose) ) = Reduce [red_3]
action 44 ( HappyTok (TParClose) ) = Reduce [red_28]
action 45 ( HappyTok (TInt _) ) = Reduce [red_27]
action 45 ( HappyTok (TVar _) ) = Reduce [red_27]
action 45 ( HappyTok (TTrue) ) = Reduce [red_27]
action 45 ( HappyTok (TFalse) ) = Reduce [red_27]
action 45 ( HappyTok (TParOpen) ) = Reduce [red_27]
action 45 ( HappyTok (TParClose) ) = Reduce [red_27]
action 46 ( HappyTok (TInt _) ) = Reduce [red_22]
action 46 ( HappyTok (TVar _) ) = Reduce [red_22]
action 46 ( HappyTok (TOp _) ) = Reduce [red_22]
action 46 ( HappyTok (TTrue) ) = Reduce [red_22]
action 46 ( HappyTok (TFalse) ) = Reduce [red_22]
action 46 ( HappyTok (TParOpen) ) = Reduce [red_22]
action 46 ( HappyTok (TParClose) ) = Reduce [red_22]
action 47 ( HappyTok (TInt _) ) = Reduce [red_1]
action 47 ( HappyTok (TVar _) ) = Reduce [red_1]
action 47 ( HappyTok (TTrue) ) = Reduce [red_1]
action 47 ( HappyTok (TFalse) ) = Reduce [red_1]
action 47 ( HappyTok (TParOpen) ) = Shift 7 []
action 47 ( HappyTok (TParClose) ) = Shift 51 []
action 48 ( HappyTok (TVar _) ) = Reduce [red_13]
action 48 ( HappyTok (TParClose) ) = Reduce [red_13]
action 49 ( HappyTok (TParOpen) ) = Reduce [red_1]
action 50 ( HappyTok (TParClose) ) = Reduce [red_11]
action 51 ( HappyTok (TParClose) ) = Reduce [red_33]
action _ _ = Error
red_1 = (G_Pos,0 :: Int,semfn_0_0)
red_2 = (G_Obelisk,1 :: Int,semfn_1_0)
red_3 = (G_Stmts,0 :: Int,semfn_2_0)
red_4 = (G_Stmts,2 :: Int,semfn_3_0)
red_5 = (G_Stmt,1 :: Int,semfn_4_0)
red_6 = (G_Stmt,3 :: Int,semfn_5_0)
red_7 = (G_PStmt,1 :: Int,semfn_4_0)
red_8 = (G_PStmt,1 :: Int,semfn_4_0)
red_9 = (G_PStmt,1 :: Int,semfn_4_0)
red_10 = (G_Def,4 :: Int,semfn_6_0)
red_11 = (G_Def,7 :: Int,semfn_7_0)
red_12 = (G_Vars,1 :: Int,semfn_8_0)
red_13 = (G_Vars,2 :: Int,semfn_9_0)
red_14 = (G_If,5 :: Int,semfn_10_0)
red_15 = (G_LocalSet,4 :: Int,semfn_6_1)
red_16 = (G_PStmtexp,2 :: Int,semfn_11_0)
red_17 = (G_Stmtexp,2 :: Int,semfn_11_0)
red_18 = (G_TExp,1 :: Int,semfn_12_0)
red_19 = (G_TExp,1 :: Int,semfn_12_0)
red_20 = (G_TExp,1 :: Int,semfn_12_0)
red_21 = (G_Exp,1 :: Int,semfn_12_0)
red_22 = (G_Exp,3 :: Int,semfn_13_0)
red_23 = (G_PExp,1 :: Int,semfn_12_0)
red_24 = (G_PExp,1 :: Int,semfn_12_0)
red_25 = (G_Apply,3 :: Int,semfn_14_0)
red_26 = (G_Exps,0 :: Int,semfn_15_0)
red_27 = (G_Exps,2 :: Int,semfn_16_0)
red_28 = (G_Infix,4 :: Int,semfn_17_0)
red_29 = (G_Var,2 :: Int,semfn_18_0)
red_30 = (G_Int,2 :: Int,semfn_18_1)
red_31 = (G_Bool,2 :: Int,semfn_12_1)
red_32 = (G_Bool,2 :: Int,semfn_12_2)
red_33 = (G_Returner,4 :: Int,semfn_19_0)
goto 0 G_Obelisk = 2
goto 0 G_Stmts = 3

goto 3 G_Pos = 4
goto 3 G_Stmt = 5
goto 3 G_Stmtexp = 6

goto 4 G_Pos = 13
goto 4 G_TExp = 14
goto 4 G_Var = 15
goto 4 G_Int = 16
goto 4 G_Bool = 17

goto 7 G_Pos = 8
goto 7 G_PStmt = 9
goto 7 G_Def = 10
goto 7 G_LocalSet = 11
goto 7 G_PStmtexp = 12

goto 8 G_Pos = 23
goto 8 G_PExp = 24
goto 8 G_Apply = 25
goto 8 G_Infix = 26

goto 23 G_Pos = 13
goto 23 G_TExp = 31
goto 23 G_Exp = 32
goto 23 G_Var = 15
goto 23 G_Int = 16
goto 23 G_Bool = 17

goto 29 G_Pos = 13
goto 29 G_TExp = 31
goto 29 G_Exp = 40
goto 29 G_Var = 15
goto 29 G_Int = 16
goto 29 G_Bool = 17

goto 30 G_Pos = 37
goto 30 G_Returner = 38

goto 32 G_Exps = 35

goto 33 G_Pos = 23
goto 33 G_PExp = 34
goto 33 G_Apply = 25
goto 33 G_Infix = 26

goto 35 G_Pos = 13
goto 35 G_TExp = 31
goto 35 G_Exp = 45
goto 35 G_Var = 15
goto 35 G_Int = 16
goto 35 G_Bool = 17

goto 36 G_Pos = 13
goto 36 G_TExp = 31
goto 36 G_Exp = 44
goto 36 G_Var = 15
goto 36 G_Int = 16
goto 36 G_Bool = 17

goto 39 G_Vars = 41

goto 43 G_Stmts = 47

goto 47 G_Pos = 4
goto 47 G_Stmt = 5
goto 47 G_Stmtexp = 6

goto 49 G_Pos = 37
goto 49 G_Returner = 50

goto _ _ = -1
