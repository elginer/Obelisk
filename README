The Obelisk Programming Language
Copright 2010 John Morrice
Released under the terms of the GNU General Public License.  See COPYING.

Contact: John Morrice of spoon@killersmurf.com

From the Obelisk Report:
         "Obelisk is a general purpose systems programming language.

          Obelisk aims to:
          Have an expressive type system, but be utterly type-safe.
          Respect functional purity, with no mutable variables in functions...
          ...but also to support class-based objects that control the mutable state represented by their instance variables.
          Be native-code compiling, for speed.
          Have a robust development methodology. Everything must be tested rigorously because programmers cry when their code-generators break."

...well, not quite.  That is what Obelisk aims to be.  This is a work-in progress compiler for the Obelisk programming language.

What you'll need to work on this:
* The Glasgow Haskell compiler.  I am using version 6.10.4.
* Cabal-install, a command line interface to GHC package management.
* A C compiler.  The scripts that build the runtime are rigged to use GCC.  I use C99 and -pedantic.

Current stage: iteration #1
Objectives: implement a compiler for non-polymorphic, simply typed functions.

What we have:
In the compiler; Lexical analysis, parse, and type-checking of simple functions.  Check the 'tests' directory.

In the run-time: Basic memory management, copying garbage collector.

Build the compiler with ./build.sh
Run the tests with ./test.sh
Build the runtime with ./runtime.sh

In the runtime directory
Build the tests with ./test.sh
Execute the runtime tests by hand or within gdb.
